"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8498],{1827:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var s=n(4848),t=n(8453);const o={},d="Burner",c={id:"contracts/burner",title:"Burner",description:"- Source Code",source:"@site/docs/contracts/burner.md",sourceDirName:"contracts",slug:"/contracts/burner",permalink:"/lido-docs-spanish/contracts/burner",draft:!1,unlisted:!1,editUrl:"https://github.com/adminseedlatam/lido-docs-spanish/edit/main/docs/contracts/burner.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"DepositSecurityModule",permalink:"/lido-docs-spanish/contracts/deposit-security-module"},next:{title:"LidoExecutionLayerRewardsVault",permalink:"/lido-docs-spanish/contracts/lido-execution-layer-rewards-vault"}},i={},a=[{value:"Shares burnt counters",id:"shares-burnt-counters",level:2},{value:"View methods",id:"view-methods",level:2},{value:"getCoverSharesBurnt()",id:"getcoversharesburnt",level:3},{value:"getNonCoverSharesBurnt()",id:"getnoncoversharesburnt",level:3},{value:"getExcessStETH()",id:"getexcesssteth",level:3},{value:"getSharesRequestedToBurn()",id:"getsharesrequestedtoburn",level:3},{value:"Methods",id:"methods",level:2},{value:"requestBurnMyStETHForCover()",id:"requestburnmystethforcover",level:3},{value:"Parameters",id:"parameters",level:4},{value:"requestBurnSharesForCover()",id:"requestburnsharesforcover",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"requestBurnMyStETH()",id:"requestburnmysteth",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"requestBurnShares()",id:"requestburnshares",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"recoverExcessStETH()",id:"recoverexcesssteth",level:3},{value:"recoverERC20()",id:"recovererc20",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"recoverERC721()",id:"recovererc721",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"commitSharesToBurn()",id:"commitsharestoburn",level:3},{value:"Parameters",id:"parameters-6",level:4}];function l(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"burner",children:"Burner"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://github.com/lidofinance/lido-dao/blob/master/contracts/0.8.9/Burner.sol",children:"Source Code"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"https://etherscan.io/address/0xD15a672319Cf0352560eE76d9e89eAB0889046D3",children:"Deployed Contract"})}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"The contract provides a way for Lido protocol to burn stETH token shares as a means to finalize withdrawals,\npenalize untimely exiting node operators, and, possibly, cover losses in staking."}),"\n",(0,s.jsxs)(r.p,{children:["It relies on the ",(0,s.jsx)(r.a,{href:"/contracts/lido#rebase",children:"rebasing"})," nature of stETH. The ",(0,s.jsx)(r.code,{children:"Lido"})," contract calculates\nuser balance using the following equation:\n",(0,s.jsx)(r.code,{children:"balanceOf(account) = shares[account] * totalPooledEther / totalShares"}),".\nTherefore, burning shares (e.g. decreasing the ",(0,s.jsx)(r.code,{children:"totalShares"})," amount) increases stETH holders' balances."]}),"\n",(0,s.jsxs)(r.p,{children:["It's presumed that actual shares burning happens inside the ",(0,s.jsx)(r.a,{href:"/contracts/lido",children:(0,s.jsx)(r.code,{children:"Lido"})})," contract as a part of the ",(0,s.jsx)(r.a,{href:"/contracts/accounting-oracle",children:(0,s.jsx)(r.code,{children:"AccountingOracle"})})," report.\n",(0,s.jsx)(r.code,{children:"Burner"})," provides a safe and deterministic way to incur a positive stETH token rebase by gradually\ndecreasing ",(0,s.jsx)(r.code,{children:"totalShares"})," that can be correctly handled by 3rd party protocols integrated with stETH."]}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"Burner"})," accepts burning requests in the following two ways:"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Locking ",(0,s.jsx)(r.strong,{children:"someone's pre-approved"})," stETH by the caller with the assigned ",(0,s.jsx)(r.code,{children:"REQUEST_BURN_SHARES_ROLE"}),";"]}),"\n",(0,s.jsxs)(r.li,{children:["Locking ",(0,s.jsx)(r.strong,{children:"caller-provided"})," stETH with the ",(0,s.jsx)(r.code,{children:"REQUEST_BURN_MY_STETH_ROLE"})," assigned role."]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["Those burn requests are initially set by the contract to a pending state.\nActual burning happens as part of an oracle (",(0,s.jsx)(r.a,{href:"/contracts/accounting-oracle",children:(0,s.jsx)(r.code,{children:"AccountingOracle"})}),") report handling by ",(0,s.jsx)(r.a,{href:"/contracts/lido",children:(0,s.jsx)(r.code,{children:"Lido"})})," to prevent\nadditional fluctuations of the existing stETH token rebase period (~24h)."]}),"\n",(0,s.jsx)(r.p,{children:"We also distinguish two types of shares burn requests:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["request to ",(0,s.jsx)(r.strong,{children:"cover"})," a slashing event (e.g. decreasing of the total pooled ETH amount\nbetween the two consecutive oracle reports);"]}),"\n",(0,s.jsxs)(r.li,{children:["request to burn shares for any other cases (",(0,s.jsx)(r.strong,{children:"non-cover"}),")."]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["The contract has two separate counters for the burnt shares: cover and non-cover ones. The contract is\nexclusively responsible for the stETH shares burning by ",(0,s.jsx)(r.a,{href:"/contracts/lido",children:(0,s.jsx)(r.code,{children:"Lido"})})," and burning allowed only from the contract's\nown balance only."]}),"\n",(0,s.jsx)(r.h2,{id:"shares-burnt-counters",children:"Shares burnt counters"}),"\n",(0,s.jsxs)(r.p,{children:["The contract keeps count of all shares ever burned by way of maintaining two internal counters:\n",(0,s.jsx)(r.code,{children:"totalCoverSharesBurnt"})," and ",(0,s.jsx)(r.code,{children:"totalNonCoverSharesBurnt"})," for cover and non-cover burns, respectively.\nThese counters are increased when actual stETH burn is performed as part of the Lido Oracle report."]}),"\n",(0,s.jsx)(r.p,{children:"This makes it possible to split any stETH rebase into two sub-components: the rewards-induced rebase\nand cover application-induced rebase, which can be done as follows:"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Before the rebase, store the previous values of both counters, as well as the value of stETH share price:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sol",children:"prevCoverSharesBurnt = Burner.totalCoverSharesBurnt()\nprevSharePrice = stETH.totalSupply() / stETH.getTotalShares()\n"})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"After the rebase, perform the following calculations:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sol",children:"sharesBurntFromOldToNew = Burner.totalCoverSharesBurnt() - prevCoverSharesBurnt;\nnewSharePriceAfterCov = stETH.totalSupply() / (stETH.getTotalShares() + sharesBurntFromOldToNew);\nnewSharePrice = stETH.totalSupply() / stETH.getTotalShares();\n\n// rewards-induced share price increase\nrewardPerShare = newSharePriceAfterCov - prevSharePrice;\n\n// cover-induced share price increase\nnonRewardSharePriceIncrease = newSharePrice - prevSharePrice - rewardPerShare;\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"view-methods",children:"View methods"}),"\n",(0,s.jsx)(r.h3,{id:"getcoversharesburnt",children:"getCoverSharesBurnt()"}),"\n",(0,s.jsx)(r.p,{children:"Returns the total cover shares ever burnt."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sol",children:"function getCoverSharesBurnt() external view returns (uint256)\n"})}),"\n",(0,s.jsx)(r.h3,{id:"getnoncoversharesburnt",children:"getNonCoverSharesBurnt()"}),"\n",(0,s.jsx)(r.p,{children:"Returns the total non-cover shares ever burnt."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sol",children:"function getNonCoverSharesBurnt() external view returns (uint256)\n"})}),"\n",(0,s.jsx)(r.h3,{id:"getexcesssteth",children:"getExcessStETH()"}),"\n",(0,s.jsx)(r.p,{children:"Returns the stETH amount belonging to the burner contract address but not marked for burning."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sol",children:"function getExcessStETH() external view returns (uint256)\n"})}),"\n",(0,s.jsx)(r.h3,{id:"getsharesrequestedtoburn",children:"getSharesRequestedToBurn()"}),"\n",(0,s.jsx)(r.p,{children:"Returns numbers of cover and non-cover shares requested to burn."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sol",children:"function getSharesRequestedToBurn() external view returns (uint256 coverShares, uint256 nonCoverShares)\n"})}),"\n",(0,s.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(r.h3,{id:"requestburnmystethforcover",children:"requestBurnMyStETHForCover()"}),"\n",(0,s.jsxs)(r.p,{children:["Transfers stETH tokens from the message sender and irreversibly locks these on the burner contract address.\nInternally converts tokens amount into underlying shares amount and marks the converted shares amount\nfor cover-backed burning by increasing the internal ",(0,s.jsx)(r.code,{children:"coverSharesBurnRequested"})," counter."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sol",children:"function requestBurnMyStETHForCover(uint256 _stETHAmountToBurn) external\n"})}),"\n",(0,s.jsxs)(r.admonition,{type:"note",children:[(0,s.jsx)(r.p,{children:"Reverts if any of the following is true:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"msg.sender"})," is not a holder of the ",(0,s.jsx)(r.code,{children:"REQUEST_BURN_MY_STETH_ROLE"})," role;"]}),"\n",(0,s.jsxs)(r.li,{children:["no stETH provided (",(0,s.jsx)(r.code,{children:"_stETHAmountToBurn == 0"}),");"]}),"\n",(0,s.jsx)(r.li,{children:"no stETH transferred (allowance exceeded)."}),"\n"]})]}),"\n",(0,s.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Name"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsx)(r.tbody,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"_stETHAmountToBurn"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"uint256"})}),(0,s.jsx)(r.td,{children:"stETH tokens amount (not shares amount) to burn"})]})})]}),"\n",(0,s.jsx)(r.h3,{id:"requestburnsharesforcover",children:"requestBurnSharesForCover()"}),"\n",(0,s.jsxs)(r.p,{children:["Transfers stETH shares from ",(0,s.jsx)(r.code,{children:"_from"})," and irreversibly locks these on the burner contract address.\nInternally marks the shares amount for cover-backed burning by increasing the internal ",(0,s.jsx)(r.code,{children:"coverSharesBurnRequested"})," counter."]}),"\n",(0,s.jsxs)(r.p,{children:["Can be called only by a holder of ",(0,s.jsx)(r.code,{children:"REQUEST_BURN_SHARES_ROLE"}),". After Lido V2 upgrade not actually called by any contract and supposed to be called by Lido DAO Agent in case of a need for cover."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sol",children:"function requestBurnSharesForCover(address _from, uint256 _sharesAmountToBurn)\n"})}),"\n",(0,s.jsxs)(r.admonition,{type:"note",children:[(0,s.jsx)(r.p,{children:"Reverts if any of the following is true:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"msg.sender"})," is not a holder of the ",(0,s.jsx)(r.code,{children:"REQUEST_BURN_SHARES_ROLE"})," role;"]}),"\n",(0,s.jsxs)(r.li,{children:["no stETH shares provided (",(0,s.jsx)(r.code,{children:"_sharesAmountToBurn == 0"}),");"]}),"\n",(0,s.jsx)(r.li,{children:"no stETH shares transferred (allowance exceeded)."}),"\n"]})]}),"\n",(0,s.jsx)(r.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Name"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"_from"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"address"})}),(0,s.jsx)(r.td,{children:"address to transfer shares from"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"_sharesAmountToBurn"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"uint256"})}),(0,s.jsx)(r.td,{children:"shares amount (not stETH tokens amount) to burn"})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"requestburnmysteth",children:"requestBurnMyStETH()"}),"\n",(0,s.jsxs)(r.p,{children:["Transfers stETH tokens from the message sender and irreversibly locks these on the burner contract address.\nInternally converts tokens amount into underlying shares amount and marks the converted amount for\nnon-cover backed burning by increasing the internal ",(0,s.jsx)(r.code,{children:"nonCoverSharesBurnRequested"})," counter."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sol",children:"function requestBurnMyStETH(uint256 _stETHAmountToBurn) external\n"})}),"\n",(0,s.jsxs)(r.admonition,{type:"note",children:[(0,s.jsx)(r.p,{children:"Reverts if any of the following is true:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"msg.sender"})," is not a holder of the ",(0,s.jsx)(r.code,{children:"REQUEST_BURN_MY_STETH_ROLE"})," role;"]}),"\n",(0,s.jsxs)(r.li,{children:["no stETH provided (",(0,s.jsx)(r.code,{children:"_stETHAmountToBurn == 0"}),");"]}),"\n",(0,s.jsx)(r.li,{children:"no stETH transferred (allowance exceeded)."}),"\n"]})]}),"\n",(0,s.jsx)(r.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Name"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsx)(r.tbody,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"_stETHAmountToBurn"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"uint256"})}),(0,s.jsx)(r.td,{children:"stETH tokens amount (not shares amount) to burn"})]})})]}),"\n",(0,s.jsx)(r.h3,{id:"requestburnshares",children:"requestBurnShares()"}),"\n",(0,s.jsxs)(r.p,{children:["Transfers stETH shares from ",(0,s.jsx)(r.code,{children:"_from"})," and irreversibly locks these on the burner contract address.\nInternally marks the shares amount for non-cover backed burning by increasing the internal ",(0,s.jsx)(r.code,{children:"nonCoverSharesBurnRequested"})," counter."]}),"\n",(0,s.jsxs)(r.p,{children:["Can be called only by a holder of the ",(0,s.jsx)(r.code,{children:"REQUEST_BURN_SHARES_ROLE"})," role which after\nLido V2 upgrade is either ",(0,s.jsx)(r.a,{href:"/contracts/lido",children:(0,s.jsx)(r.code,{children:"Lido"})})," or ",(0,s.jsx)(r.a,{href:"/contracts/node-operators-registry",children:(0,s.jsx)(r.code,{children:"NodeOperatorsRegistry"})}),".\n",(0,s.jsx)(r.a,{href:"/contracts/lido",children:(0,s.jsx)(r.code,{children:"Lido"})})," needs this to request shares locked on the ",(0,s.jsx)(r.a,{href:"/contracts/withdrawal-queue-erc721",children:(0,s.jsx)(r.code,{children:"WithdrawalQueueERC721"})})," and\n",(0,s.jsx)(r.a,{href:"/contracts/node-operators-registry",children:(0,s.jsx)(r.code,{children:"NodeOperatorsRegistry"})})," needs it to request burning shares to penalize the rewards of misbehaving node operators."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sol",children:"function requestBurnShares(address _from, uint256 _sharesAmountToBurn)\n"})}),"\n",(0,s.jsxs)(r.admonition,{type:"note",children:[(0,s.jsx)(r.p,{children:"Reverts if any of the following is true:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"msg.sender"})," is not a holder of ",(0,s.jsx)(r.code,{children:"REQUEST_BURN_SHARES_ROLE"})," role;"]}),"\n",(0,s.jsxs)(r.li,{children:["no stETH shares provided (",(0,s.jsx)(r.code,{children:"_sharesAmountToBurn == 0"}),");"]}),"\n",(0,s.jsx)(r.li,{children:"no stETH shares transferred (allowance exceeded)."}),"\n"]})]}),"\n",(0,s.jsx)(r.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Name"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"_from"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"address"})}),(0,s.jsx)(r.td,{children:"address to transfer shares from"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"_sharesAmountToBurn"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"uint256"})}),(0,s.jsx)(r.td,{children:"shares amount (not stETH tokens amount) to burn"})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"recoverexcesssteth",children:"recoverExcessStETH()"}),"\n",(0,s.jsxs)(r.p,{children:["Transfers the excess stETH amount (e.g. belonging to the burner contract address but not marked for burning)\nto the Lido treasury address (the ",(0,s.jsx)(r.code,{children:"DAO Agent"})," contract) set upon the contract construction."]}),"\n",(0,s.jsxs)(r.p,{children:["Does nothing if the ",(0,s.jsx)(r.code,{children:"getExcessStETH"})," view func returns 0 (zero), i.e. there is no excess stETH\non the contract's balance."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sol",children:"function recoverExcessStETH() external\n"})}),"\n",(0,s.jsx)(r.h3,{id:"recovererc20",children:"recoverERC20()"}),"\n",(0,s.jsxs)(r.p,{children:["Transfers a given amount of an ERC20-token (defined by the provided contract address) belonging\nto the burner contract address to the Lido treasury (the ",(0,s.jsx)(r.code,{children:"DAO Agent"})," contract) address."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sol",children:"function recoverERC20(address _token, uint256 _amount) external\n"})}),"\n",(0,s.jsxs)(r.admonition,{type:"note",children:[(0,s.jsx)(r.p,{children:"Reverts if any of the following is true:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"_amount"})," value is 0 (zero);"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"_token"})," address is 0 (zero);"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"_token"})," address equals to the ",(0,s.jsx)(r.code,{children:"stETH"})," address (use ",(0,s.jsx)(r.code,{children:"recoverExcessStETH"})," instead)."]}),"\n"]})]}),"\n",(0,s.jsx)(r.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Name"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"_token"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"address"})}),(0,s.jsx)(r.td,{children:"ERC20-compatible token address to recover"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"_amount"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"uint256"})}),(0,s.jsx)(r.td,{children:"Amount to recover"})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"recovererc721",children:"recoverERC721()"}),"\n",(0,s.jsxs)(r.p,{children:["Transfers a given ERC721-compatible NFT (defined by the contract address) belonging\nto the burner contract address to the Lido treasury (the ",(0,s.jsx)(r.code,{children:"DAO Agent"}),") address."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sol",children:"function recoverERC721(address _token, uint256 _tokenId) external\n"})}),"\n",(0,s.jsxs)(r.admonition,{type:"note",children:[(0,s.jsx)(r.p,{children:"Reverts if any of the following is true:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"_token"})," address is 0 (zero);"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"_token"})," address equals to the ",(0,s.jsx)(r.code,{children:"stETH"})," address (use ",(0,s.jsx)(r.code,{children:"recoverExcessStETH"})," instead)."]}),"\n"]})]}),"\n",(0,s.jsx)(r.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Name"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"_token"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"address"})}),(0,s.jsx)(r.td,{children:"ERC721-compatible token address to recover"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"_tokenId"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"uint256"})}),(0,s.jsx)(r.td,{children:"Token id to recover"})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"commitsharestoburn",children:"commitSharesToBurn()"}),"\n",(0,s.jsxs)(r.p,{children:["Marks previously requested to burn cover and non-cover share as burnt.\nEmits ",(0,s.jsx)(r.code,{children:"StETHBurnt"})," event for the cover and non-cover shares marked as burnt."]}),"\n",(0,s.jsxs)(r.p,{children:["This function is called by the ",(0,s.jsx)(r.code,{children:"Lido"})," contract together with (i.e., the same tx) performing the actual shares burning."]}),"\n",(0,s.jsxs)(r.p,{children:["If ",(0,s.jsx)(r.code,{children:"_sharesToBurn"})," is 0 does nothing."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sol",children:"function commitSharesToBurn(uint256 _sharesToBurn) external\n"})}),"\n",(0,s.jsxs)(r.admonition,{type:"note",children:[(0,s.jsx)(r.p,{children:"Reverts if any of the following is true:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"msg.sender"})," address is NOT equal to the ",(0,s.jsx)(r.code,{children:"stETH"})," address;"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"_sharesToBurn"})," is greater than the cover plus non-cover shares requested to burn."]}),"\n"]})]}),"\n",(0,s.jsx)(r.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Name"}),(0,s.jsx)(r.th,{children:"Type"}),(0,s.jsx)(r.th,{children:"Description"})]})}),(0,s.jsx)(r.tbody,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"_sharesToBurn"})}),(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"uint256"})}),(0,s.jsx)(r.td,{children:"Amount of cover plus non-cover shares to mark as burnt"})]})})]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>d,x:()=>c});var s=n(6540);const t={},o=s.createContext(t);function d(e){const r=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),s.createElement(o.Provider,{value:r},e.children)}}}]);