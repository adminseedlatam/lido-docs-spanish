"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5953],{8768:(e,t,d)=>{d.r(t),d.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=d(4848),s=d(8453);const i={},r="StakingRouter",l={id:"contracts/staking-router",title:"StakingRouter",description:"- Source code",source:"@site/docs/contracts/staking-router.md",sourceDirName:"contracts",slug:"/contracts/staking-router",permalink:"/contracts/staking-router",draft:!1,unlisted:!1,editUrl:"https://github.com/adminseedlatam/lido-docs-spanish/edit/main/docs/contracts/staking-router.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"OracleDaemonConfig",permalink:"/contracts/oracle-daemon-config"},next:{title:"NodeOperatorsRegistry",permalink:"/contracts/node-operators-registry"}},o={},c=[{value:"What is StakingRouter?",id:"what-is-stakingrouter",level:2},{value:"Module Management",id:"module-management",level:2},{value:"Registering a module",id:"registering-a-module",level:3},{value:"Pausing modules",id:"pausing-modules",level:3},{value:"Exited and stuck validators",id:"exited-and-stuck-validators",level:3},{value:"Stake allocation",id:"stake-allocation",level:2},{value:"Deposit",id:"deposit",level:3},{value:"Allocation algorithm",id:"allocation-algorithm",level:3},{value:"Fee distribution",id:"fee-distribution",level:2},{value:"Helpful links",id:"helpful-links",level:2},{value:"View methods",id:"view-methods",level:2},{value:"<code>getLido</code>",id:"getlido",level:3},{value:"<code>getStakingModules</code>",id:"getstakingmodules",level:3},{value:"<code>getStakingModuleIds</code>",id:"getstakingmoduleids",level:3},{value:"<code>getStakingModule</code>",id:"getstakingmodule",level:3},{value:"<code>getStakingModulesCount</code>",id:"getstakingmodulescount",level:3},{value:"<code>hasStakingModule</code>",id:"hasstakingmodule",level:3},{value:"<code>getStakingModuleStatus</code>",id:"getstakingmodulestatus",level:3},{value:"<code>getStakingModuleSummary</code>",id:"getstakingmodulesummary",level:3},{value:"<code>getNodeOperatorSummary</code>",id:"getnodeoperatorsummary",level:3},{value:"<code>getAllStakingModuleDigests</code>",id:"getallstakingmoduledigests",level:3},{value:"<code>getStakingModuleDigests</code>",id:"getstakingmoduledigests",level:3},{value:"<code>getAllNodeOperatorDigests</code>",id:"getallnodeoperatordigests",level:3},{value:"<code>getNodeOperatorDigests</code>",id:"getnodeoperatordigests",level:3},{value:"<code>getStakingModuleIsStopped</code>",id:"getstakingmoduleisstopped",level:3},{value:"<code>getStakingModuleIsDepositsPaused</code>",id:"getstakingmoduleisdepositspaused",level:3},{value:"<code>getStakingModuleIsActive</code>",id:"getstakingmoduleisactive",level:3},{value:"<code>getStakingModuleNonce</code>",id:"getstakingmodulenonce",level:3},{value:"<code>getStakingModuleLastDepositBlock</code>",id:"getstakingmodulelastdepositblock",level:3},{value:"<code>getStakingModuleActiveValidatorsCount</code>",id:"getstakingmoduleactivevalidatorscount",level:3},{value:"<code>getStakingModuleMaxDepositsCount</code>",id:"getstakingmodulemaxdepositscount",level:3},{value:"<code>getStakingFeeAggregateDistribution</code>",id:"getstakingfeeaggregatedistribution",level:3},{value:"<code>getStakingRewardsDistribution</code>",id:"getstakingrewardsdistribution",level:3},{value:"<code>getDepositsAllocation</code>",id:"getdepositsallocation",level:3},{value:"<code>getWithdrawalCredentials</code>",id:"getwithdrawalcredentials",level:3},{value:"Write methods",id:"write-methods",level:2},{value:"<code>addStakingModule</code>",id:"addstakingmodule",level:3},{value:"<code>updateStakingModule</code>",id:"updatestakingmodule",level:3},{value:"<code>updateTargetValidatorsLimits</code>",id:"updatetargetvalidatorslimits",level:3},{value:"<code>updateRefundedValidatorsCount</code>",id:"updaterefundedvalidatorscount",level:3},{value:"<code>reportRewardsMinted</code>",id:"reportrewardsminted",level:3},{value:"<code>updateExitedValidatorsCountByStakingModule</code>",id:"updateexitedvalidatorscountbystakingmodule",level:3},{value:"<code>reportStakingModuleExitedValidatorsCountByNodeOperator</code>",id:"reportstakingmoduleexitedvalidatorscountbynodeoperator",level:3},{value:"<code>unsafeSetExitedValidatorsCount</code>",id:"unsafesetexitedvalidatorscount",level:3},{value:"<code>reportStakingModuleStuckValidatorsCountByNodeOperator</code>",id:"reportstakingmodulestuckvalidatorscountbynodeoperator",level:3},{value:"<code>onValidatorsCountsByNodeOperatorReportingFinished</code>",id:"onvalidatorscountsbynodeoperatorreportingfinished",level:3}];function a(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"stakingrouter",children:"StakingRouter"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://github.com/lidofinance/lido-dao/blob/master/contracts/0.8.9/StakingRouter.sol",children:"Source code"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://etherscan.io/address/0xFdDf38947aFB03C621C71b06C9C70bce73f12999",children:"Deployed contract"})}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"StakingRouter is a registry of staking modules, each encapsulating a certain validator subset, e.g. the Lido DAO-curated staking module. The contract allocates stake to modules, distributes protocol fees, and tracks relevant information."}),"\n",(0,n.jsx)(t.h2,{id:"what-is-stakingrouter",children:"What is StakingRouter?"}),"\n",(0,n.jsxs)(t.p,{children:["StakingRouter is a top-level controller contract for staking modules. Each staking module is a contract that, in turn, manages its own subset of validators, e.g. the ",(0,n.jsx)(t.a,{href:"https://etherscan.io/address/0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5",children:"Curated"})," staking module is a set of Lido DAO-vetted node operators. Such modular design opens the opportunity for anyone to build a staking module and join the Lido staking platform, including permissionless community stakers, DVT-enabled validators or any other validator subset, technology or mechanics."]}),"\n",(0,n.jsx)(t.p,{children:"StakingRouter performs a number of functions, including:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"maintaining a registry of staking modules,"}),"\n",(0,n.jsx)(t.li,{children:"allocating stake to modules, and"}),"\n",(0,n.jsx)(t.li,{children:"distributing protocol fees."}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"module-management",children:"Module Management"}),"\n",(0,n.jsx)(t.h3,{id:"registering-a-module",children:"Registering a module"}),"\n",(0,n.jsx)(t.p,{children:"Modules are registered with StakingRouter through the Lido DAO voting process. To be considered by the governance, the applying module contract should implement the appropriate module interface, meet security requirements, and have a fee structure aligned with the Lido protocol sustainability. Once voted in, the module starts receiving stake and protocol fees."}),"\n",(0,n.jsxs)(t.p,{children:["Staking modules are registered using the ",(0,n.jsx)(t.code,{children:"addStakingModule"})," function, providing details such as:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"the module's name: a human-readable name;"}),"\n",(0,n.jsx)(t.li,{children:"address of the deployed staking module contract;"}),"\n",(0,n.jsx)(t.li,{children:"target share, a relative hard cap on deposits within Lido;"}),"\n",(0,n.jsx)(t.li,{children:"module fee, a percentage of staking rewards to be awarded to the module,"}),"\n",(0,n.jsx)(t.li,{children:"and treasury fee, a percentage of staking rewards to be directed to the protocol treasury."}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"pausing-modules",children:"Pausing modules"}),"\n",(0,n.jsx)(t.p,{children:"Each staking module has a status: a state that determines whether the module can perform deposits and receive rewards:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Active"}),", can make deposits and receives rewards,"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"DepositsPaused"}),", deposits are not allowed but receives rewards,"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"Stopped"}),", cannot make deposits and does not receive rewards."]}),"\n"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"enum StakingModuleStatus {\n\tActive, // deposits and rewards allowed\n\tDepositsPaused, // deposits NOT allowed, rewards allowed\n\tStopped // deposits and rewards NOT allowed\n}\n"})}),"\n",(0,n.jsx)(t.h3,{id:"exited-and-stuck-validators",children:"Exited and stuck validators"}),"\n",(0,n.jsx)(t.p,{children:"When the withdrawal requests demand exceed buffered ether sitting in Lido together with projected rewards, the protocol signals to node operators to start exiting validators to cover the withdrawals. In this connection, StakingRouter distinguishes two types of validator states:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.a,{href:"https://hackmd.io/zHYFZr4eRGm3Ju9_vkcSgQ?view",children:"exited"})," validators,"]}),"\n",(0,n.jsx)(t.li,{children:"and stuck validators, meaning those validators that failed to comply with the exit signal."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"StakingRouter keeps track of both of these types of validators in order to correctly allocate stake and penalize stuck validators. These stats are kept up to date via the oracles submitting the data to the contract."}),"\n",(0,n.jsx)(t.h2,{id:"stake-allocation",children:"Stake allocation"}),"\n",(0,n.jsxs)(t.p,{children:["StakingRouter carries out a vital task of distributing depositable ether to staking modules in a manner that aligns with their growth targets set by the DAO. This design ensures a regulated and controlled growth for the modules that have been newly integrated into the system. The principles governing this methodology are comprehensively discussed in ",(0,n.jsx)(t.a,{href:"https://hackmd.io/f1wvHzpjTIq41-GCrdaMjw?view#Target-shares",children:"ADR: Staking Router"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"deposit",children:"Deposit"}),"\n",(0,n.jsxs)(t.p,{children:["The deposit workflow involves submitting batches of 32 ether deposits, along with associated validator keys, to ",(0,n.jsx)(t.a,{href:"https://ethereum.org/en/staking/deposit-contract/",children:(0,n.jsx)(t.code,{children:"DepositContract"})})," in one transaction. Given that each staking module handles its own deposits, every batch deposit is restricted to keys originating from a single module."]}),"\n",(0,n.jsxs)(t.p,{children:["The deposit operation is, at its core, a sequence of contract calls sparked by an off-chain software, the ",(0,n.jsx)(t.a,{href:"https://github.com/lidofinance/depositor-bot",children:"depositor bot"}),". This bot gathers guardian messages to confirm that there are no pre-existing keys in the registry that could take advantage of the ",(0,n.jsx)(t.a,{href:"https://github.com/lidofinance/lido-improvement-proposals/blob/develop/LIPS/lip-5.md",children:"frontrunning vulnerability"}),". Once the necessary quorum of guardians is reached, the bot forwards these messages along with the module identifier to the DepositSecurityModule (not to be confused with a staking module). This contract first verifies the messages, then initiates the deposit function on Lido, passing along the maximum number of deposits that the current block size can accommodate. Subsequently, Lido calculates the maximum number of deposits that can be included in the batch based on the existing deposit buffer, and triggers StakingRouter's deposit function. The StakingRouter then determines the distribution of buffered ether to the module that will use its keys in the deposit, and finally executes the batch deposit."]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"deposit"})," function begins by verifying the sender's identity and checking the withdrawal credentials and the status of the staking module. After these checks, it updates the contract's local state by recording the current timestamp and block number as the last deposit time and block for the staking module. It then emits an event to log the deposit transaction, and checks if the deposit value matches with the required total deposit size. If there are deposits to be made, it gets deposit data (public keys and signatures) from the staking module contract. It then makes deposits to ",(0,n.jsx)(t.code,{children:"DepositContract"})," using the obtained data. Finally, it confirms that all deposited ETH has been correctly transferred to the contract by comparing the contract's ether balance before and after the deposit transaction."]}),"\n",(0,n.jsx)(t.h3,{id:"allocation-algorithm",children:"Allocation algorithm"}),"\n",(0,n.jsx)(t.p,{children:"The algorithm used for the allocation process is designed to consider various factors, including the limit of deposits per transaction, the quantity of ether ready for deposit, the active and available keys within each module, and each module's target share. It then estimates the maximum deposit based on these parameters. The algorithm also identifies the key limits for all modules, and initiates the allocation of keys, starting with the module that has the least active keys. This continues until there is no more ether to allocate or when all the modules have reached their capacity. At the end of the process, any remaining ether is returned."}),"\n",(0,n.jsxs)(t.p,{children:["The allocation function uses the ",(0,n.jsx)(t.a,{href:"https://github.com/lidofinance/lido-dao/blob/master/contracts/common/lib/MinFirstAllocationStrategy.sol",children:(0,n.jsx)(t.code,{children:"MinFirstAllocationStrategy"})})," algorithm to allocate new deposits among different staking modules."]}),"\n",(0,n.jsx)(t.p,{children:"Here is a breakdown of the process:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["The function takes as input ",(0,n.jsx)(t.code,{children:"_depositsToAllocate"}),", which represents the amount of new deposits that need to be allocated among the staking modules."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["It starts by calculating the total active validators in the system (",(0,n.jsx)(t.code,{children:"totalActiveValidators"}),") and loading the current state of staking modules into a cache (",(0,n.jsx)(t.code,{children:"stakingModulesCache"}),")."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["It then creates an ",(0,n.jsx)(t.code,{children:"allocations"})," array of the same size as the number of staking modules, with each index in this array representing a staking module's current allocation (i.e., the current number of active validators in that module)."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["If there are staking modules available (",(0,n.jsx)(t.code,{children:"stakingModulesCount > 0"}),"), the function goes into the allocation process:"]}),"\n",(0,n.jsxs)(t.p,{children:["a. It calculates a new estimated total of active validators, adding the new deposits to the total active validators (",(0,n.jsx)(t.code,{children:"totalActiveValidators += _depositsToAllocate"}),")."]}),"\n",(0,n.jsxs)(t.p,{children:["b. It creates a ",(0,n.jsx)(t.code,{children:"capacities"})," array of the same size as the number of staking modules. Each entry in this array represents the maximum capacity of a particular staking module, i.e., the maximum number of validators that module can have. This is calculated as the minimum of either:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["The target number of validators for a module, which is based on a desired target share (",(0,n.jsx)(t.code,{children:"stakingModulesCache[i].targetShare * totalActiveValidators / TOTAL_BASIS_POINTS"}),"), or"]}),"\n",(0,n.jsxs)(t.li,{children:["The sum of the current active validators and the available validators in the module (",(0,n.jsx)(t.code,{children:"stakingModulesCache[i].activeValidatorsCount + stakingModulesCache[i].availableValidatorsCount"}),")."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["c. Finally, it calls the ",(0,n.jsx)(t.code,{children:"allocate"})," function from ",(0,n.jsx)(t.code,{children:"MinFirstAllocationStrategy"}),", passing in the ",(0,n.jsx)(t.code,{children:"allocations"}),", ",(0,n.jsx)(t.code,{children:"capacities"}),", and ",(0,n.jsx)(t.code,{children:"_depositsToAllocate"}),". The amount successfully allocated is stored in ",(0,n.jsx)(t.code,{children:"allocated"}),"."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["To sum up, this function is using the ",(0,n.jsx)(t.code,{children:"MinFirstAllocationStrategy"})," algorithm to distribute new deposits (validators) across different staking modules in a way that prioritizes filling the least populated modules, while taking into account each module's target share and capacity. The resulting allocations and total allocated amount are then returned for further use."]}),"\n",(0,n.jsx)(t.h2,{id:"fee-distribution",children:"Fee distribution"}),"\n",(0,n.jsxs)(t.p,{children:["The fee structure is set independently in each module. There are two components to the fee structure: the module fee and the treasury fee, both specified as percentages (basis points). For example, a 5% (500 basis points) module fee split between node operators in the module and a 5% (500 basis points) treasury fee sent to the treasury. Additionally,\xa0",(0,n.jsx)(t.code,{children:"StakingRouter"}),"\xa0utilizes a precision factor of 100 * 10^18\xa0for fees that prevents arithmetic operations from truncating the fees of small modules."]}),"\n",(0,n.jsx)(t.p,{children:"Because the protocol does not currently account for per-validator performance, the protocol fee is distributed between modules proportionally to active validators and the specified module fee. For example, a module with 75% of all validators in the protocol and a 5% module fee will receive 3.75% of the total rewards across the protocol. This means that if the modules' fee and treasury fee do not exceed 10%, the total protocol fee will not either, no matter how many modules there are. There is also an edge case where the module is stopped for emergency while its validators are still active. In this case the module fee will be transferred to the treasury and once the module is back online, the rewards will be returned back to the module from the treasury."}),"\n",(0,n.jsx)(t.p,{children:"The distribution function itself works as follows:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["The function first loads the current state of the staking modules into a cache (",(0,n.jsx)(t.code,{children:"_loadStakingModulesCache"}),") and calculates the number of these modules (",(0,n.jsx)(t.code,{children:"stakingModulesCount"}),")."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"If there are no staking modules or no active validators in the system, it returns an empty response."}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["Otherwise, it initializes arrays to store the module IDs (",(0,n.jsx)(t.code,{children:"stakingModuleIds"}),"), the addresses of reward recipients (",(0,n.jsx)(t.code,{children:"recipients"}),"), and the fees of each recipient (",(0,n.jsx)(t.code,{children:"stakingModuleFees"}),"). It also sets the ",(0,n.jsx)(t.code,{children:"precisionPoints"})," to a constant ",(0,n.jsx)(t.code,{children:"FEE_PRECISION_POINTS"}),", which represents the base precision number that constitutes 100% fee."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsx)(t.p,{children:"Then it loops through each staking module. For each module that has at least one active validator, it:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Stores the module ID and recipient address in the respective arrays."}),"\n",(0,n.jsxs)(t.li,{children:["Calculates the ",(0,n.jsx)(t.code,{children:"stakingModuleValidatorsShare"}),", which is the proportion of total active validators that are part of this staking module."]}),"\n",(0,n.jsxs)(t.li,{children:["Calculates the ",(0,n.jsx)(t.code,{children:"stakingModuleFee"})," as the product of ",(0,n.jsx)(t.code,{children:"stakingModuleValidatorsShare"})," and the fee of the staking module divided by ",(0,n.jsx)(t.code,{children:"TOTAL_BASIS_POINTS"})," (i.e., the proportion of the staking module's fee to the total possible fees). If the module is not stopped, this fee is stored in the ",(0,n.jsx)(t.code,{children:"stakingModuleFees"})," array."]}),"\n",(0,n.jsxs)(t.li,{children:["Adds to ",(0,n.jsx)(t.code,{children:"totalFee"})," the sum of the staking module's fee and a fee going to the treasury (calculated similarly to ",(0,n.jsx)(t.code,{children:"stakingModuleFee"}),"), where the treasury is a central pool of funds."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["After looping through all modules, it makes an assertion that ",(0,n.jsx)(t.code,{children:"totalFee"})," doesn't exceed 100% (represented by ",(0,n.jsx)(t.code,{children:"precisionPoints"}),")."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["If there are staking modules with no active validators, it shrinks the ",(0,n.jsx)(t.code,{children:"stakingModuleIds"}),", ",(0,n.jsx)(t.code,{children:"recipients"}),", and ",(0,n.jsx)(t.code,{children:"stakingModuleFees"})," arrays to exclude those modules."]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Finally, the function returns five arrays/values: ",(0,n.jsx)(t.code,{children:"recipients"}),", ",(0,n.jsx)(t.code,{children:"stakingModuleIds"}),", ",(0,n.jsx)(t.code,{children:"stakingModuleFees"}),", ",(0,n.jsx)(t.code,{children:"totalFee"}),", and ",(0,n.jsx)(t.code,{children:"precisionPoints"}),". These give the caller an overview of how rewards are distributed amongst the staking modules."]}),"\n",(0,n.jsx)(t.h2,{id:"helpful-links",children:"Helpful links"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://hackmd.io/f1wvHzpjTIq41-GCrdaMjw?view",children:"Staking Router ADR"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://github.com/lidofinance/lido-improvement-proposals/blob/develop/LIPS/lip-20.md",children:"Staking Router LIP"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://hackmd.io/zHYFZr4eRGm3Ju9_vkcSgQ?",children:"Lido on Ethereum Validator Exits Policy"})}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"view-methods",children:"View methods"}),"\n",(0,n.jsx)(t.h3,{id:"getlido",children:(0,n.jsx)(t.code,{children:"getLido"})}),"\n",(0,n.jsxs)(t.p,{children:["Returns the address of the core ",(0,n.jsx)(t.code,{children:"Lido"})," contract."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function getLido() public view returns (address)\n"})}),"\n",(0,n.jsx)(t.h3,{id:"getstakingmodules",children:(0,n.jsx)(t.code,{children:"getStakingModules"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the list of structs of all registered staking modules. Each staking module has an associated data structure,"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"struct StakingModule {\n\tuint24 id;\n\taddress stakingModuleAddress;\n\tuint16 stakingModuleFee;\n\tuint16 treasuryFee;\n\tuint16 targetShare;\n\tuint8 status;\n\tstring name;\n\tuint64 lastDepositAt;\n\tuint256 lastDepositBlock;\n\tuint256 exitedValidatorsCount\n}\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function getStakingModules() external view returns (StakingModule[] memory res)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"res"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"StakingModule[]"})}),(0,n.jsx)(t.td,{children:"list of structs of all registered staking modules"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getstakingmoduleids",children:(0,n.jsx)(t.code,{children:"getStakingModuleIds"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the list of ids of all registered staking modules."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function getStakingModuleIds() public view returns (uint256[] memory stakingModuleIds)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"stakingModuleIds"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256[]"})}),(0,n.jsx)(t.td,{children:"list of id of all staking modules"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getstakingmodule",children:(0,n.jsx)(t.code,{children:"getStakingModule"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the struct of the specified staking module by its id."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function getStakingModule(uint256 _stakingModuleId) public view returns(StakingModule memory)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]})})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"StakingModule"})}),(0,n.jsx)(t.td,{children:"staking module information"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getstakingmodulescount",children:(0,n.jsx)(t.code,{children:"getStakingModulesCount"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the number of registered staking modules."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function getStakingModulesCount() public view returns (uint256)\n"})}),"\n",(0,n.jsx)(t.h3,{id:"hasstakingmodule",children:(0,n.jsx)(t.code,{children:"hasStakingModule"})}),"\n",(0,n.jsx)(t.p,{children:"Return a boolean value indicating whether a staking module with the specified id is registered."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function hasStakingModule(uint256 _stakingModuleId) external view returns (bool)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getstakingmodulestatus",children:(0,n.jsx)(t.code,{children:"getStakingModuleStatus"})}),"\n",(0,n.jsx)(t.p,{children:"Return the status of the staking module."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function getStakingModuleStatus(uint256 _stakingModuleId) public view returns (StakingModuleStatus)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]})})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"StakingModuleStatus"})}),(0,n.jsx)(t.td,{children:"status of the staking module"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getstakingmodulesummary",children:(0,n.jsx)(t.code,{children:"getStakingModuleSummary"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the struct containing a short summary of validators in the specified staking module, as shown below,"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"struct StakingModuleSummary {\n\tuint256 totalExitedValidators;\n\tuint256 totalDepositedValidators;\n\tuint256 depositableValidatorsCount;\n}\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"function getStakingModuleSummary(uint256 _stakingModuleId) public view returns (StakingModuleSummary)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]})})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"StakingModuleSummary"})}),(0,n.jsx)(t.td,{children:"summary of the staking module's validators"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getnodeoperatorsummary",children:(0,n.jsx)(t.code,{children:"getNodeOperatorSummary"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the summary of a node operator from the staking module, as shown below,"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"struct NodeOperatorSummary {\n\tbool isTargetLimitActive;\n\tuint256 targetValidatorsCount;\n\tuint256 stuckValidatorsCount;\n\tuint256 refundedValidatorsCount;\n\tuint256 stuckPenaltyEndTimestamp;\n\tuint256 totalExitedValidators;\n\tuint256 totalDepositedValidators;\n\tuint256 depositableValidatorsCount;\n}\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function getNodeOperatorSummary(\n\tuint256 _stakingModuleId,\n\tuint256 _nodeOperatorId\n) public view returns (NodeOperatorSummary)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_nodeOperatorId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"node operator id"})]})]})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"NodeOperatorSummary"})}),(0,n.jsx)(t.td,{children:"summary of the node operator"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getallstakingmoduledigests",children:(0,n.jsx)(t.code,{children:"getAllStakingModuleDigests"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the digests of all staking modules, as show below,"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"struct StakingModuleDigest {\n\tuint256 nodeOperatorsCount;\n\tuint256 activeNodeOperatorsCount;\n\tStakingModule state;\n\tStakingModuleSummary summary;\n}\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"function getAllStakingModuleDigests() external view returns (StakingModuleDigest[])\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"StakingModuleDigest[]"})}),(0,n.jsx)(t.td,{children:"array of staking module digests"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getstakingmoduledigests",children:(0,n.jsx)(t.code,{children:"getStakingModuleDigests"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the digest of the specified staking modules."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"function getStakingModuleDigests(uint256[] memory _stakingModuleIds) public view returns (StakingModuleDigest[])\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleIds"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256[]"})}),(0,n.jsx)(t.td,{children:"array of staking module ids"})]})})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"StakingModuleDigest[]"})}),(0,n.jsx)(t.td,{children:"array of staking module digests"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getallnodeoperatordigests",children:(0,n.jsx)(t.code,{children:"getAllNodeOperatorDigests"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the digests of all node operators in the specified staking module,"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"struct NodeOperatorDigest {\n\tuint256 id;\n\tbool isActive;\n\tNodeOperatorSummary summary;\n}\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"function getAllNodeOperatorDigests(uint256 _stakingModuleId) external view returns (NodeOperatorDigest[])\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]})})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"NodeOperatorDigest[]"})}),(0,n.jsx)(t.td,{children:"array of node operator digests"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getnodeoperatordigests",children:(0,n.jsx)(t.code,{children:"getNodeOperatorDigests"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the digests for the specified node operators in the staking module."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function getNodeOperatorDigests(uint256 _stakingModuleId, uint256[] memory _nodeOperatorIds) public view returns (NodeOperatorDigest[])\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_nodeOperatorIds"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256[]"})}),(0,n.jsx)(t.td,{children:"array of node operator ids"})]})]})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"NodeOperatorDigest[]"})}),(0,n.jsx)(t.td,{children:"array of node operator digests"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getstakingmoduleisstopped",children:(0,n.jsx)(t.code,{children:"getStakingModuleIsStopped"})}),"\n",(0,n.jsx)(t.p,{children:"Return a boolean value whether the staking module is stopped."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function getStakingModuleIsStopped(uint256 _stakingModuleId) external view returns (bool)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]})})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"bool"})}),(0,n.jsx)(t.td,{children:"true if the staking module is stopped, false otherwise"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getstakingmoduleisdepositspaused",children:(0,n.jsx)(t.code,{children:"getStakingModuleIsDepositsPaused"})}),"\n",(0,n.jsx)(t.p,{children:"Return a boolean value whether deposits are paused for the staking module."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"function getStakingModuleIsDepositsPaused(uint256 _stakingModuleId) external view returns (bool)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]})})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"bool"})}),(0,n.jsx)(t.td,{children:"true if deposits are paused for the staking module, false otherwise"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getstakingmoduleisactive",children:(0,n.jsx)(t.code,{children:"getStakingModuleIsActive"})}),"\n",(0,n.jsx)(t.p,{children:"Return a boolean value whether the staking module is active."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"function getStakingModuleIsActive(uint256 _stakingModuleId) external view returns (bool)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]})})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"bool"})}),(0,n.jsx)(t.td,{children:"true if the staking module is active, false otherwise"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getstakingmodulenonce",children:(0,n.jsx)(t.code,{children:"getStakingModuleNonce"})}),"\n",(0,n.jsx)(t.p,{children:"Get the nonce of a staking module."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"function getStakingModuleNonce(uint256 _stakingModuleId) external view returns (uint256)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]})})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"nonce of the staking module"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getstakingmodulelastdepositblock",children:(0,n.jsx)(t.code,{children:"getStakingModuleLastDepositBlock"})}),"\n",(0,n.jsx)(t.p,{children:"Get the block number of the last deposit to the staking module."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"function getStakingModuleLastDepositBlock(uint256 _stakingModuleId) external view returns (uint256)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]})})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"block number of the last deposit"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getstakingmoduleactivevalidatorscount",children:(0,n.jsx)(t.code,{children:"getStakingModuleActiveValidatorsCount"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the number of active validators in the staking module."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"function getStakingModuleActiveValidatorsCount(uint256 _stakingModuleId) external view returns (uint256 activeValidatorsCount)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]})})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"number of active validators"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getstakingmodulemaxdepositscount",children:(0,n.jsx)(t.code,{children:"getStakingModuleMaxDepositsCount"})}),"\n",(0,n.jsx)(t.p,{children:"Calculates the maximum number of deposits a staking module can handle based on the available deposit value."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"function getStakingModuleMaxDepositsCount(\n\tuint256 _stakingModuleId,\n\tuint256 _maxDepositsValue\n) public view returns (uint256)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_maxDepositsValue"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"maximum amount of deposits based on the available ether"})]})]})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"maximum number of deposits that can be made using the given staking module"})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"getstakingfeeaggregatedistribution",children:(0,n.jsx)(t.code,{children:"getStakingFeeAggregateDistribution"})}),"\n",(0,n.jsx)(t.p,{children:"Returns the total fee distribution proportion."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"function getStakingFeeAggregateDistribution() public view returns (\n\tuint96 modulesFee,\n\tuint96 treasuryFee,\n\tuint256 basePrecision\n)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"modulesFee"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint96"})}),(0,n.jsx)(t.td,{children:"total fees for all staking modules"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"treasuryFee"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint96"})}),(0,n.jsx)(t.td,{children:"total fee for the treasury"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"basePrecision"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"base precision number, a value corresponding to the full fee"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"getstakingrewardsdistribution",children:(0,n.jsx)(t.code,{children:"getStakingRewardsDistribution"})}),"\n",(0,n.jsx)(t.p,{children:"Get the shares table."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function getStakingRewardsDistribution() public view returns (\n\taddress[] memory recipients,\n\tuint256[] memory stakingModuleIds,\n\tuint96[] memory stakingModuleFees,\n\tuint96 totalFee,\n\tuint256 precisionPoints\n)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"recipients"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"address[]"})}),(0,n.jsx)(t.td,{children:"total staking module addresses"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"stakingModuleIds"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256[]"})}),(0,n.jsx)(t.td,{children:"staking module ids"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"stakingModuleFees"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint96[]"})}),(0,n.jsx)(t.td,{children:"staking module fees"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"totalFee"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint96[]"})}),(0,n.jsx)(t.td,{children:"total fee"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"precisionPoints"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"base precision number, a value corresponding to the full fee"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"getdepositsallocation",children:(0,n.jsx)(t.code,{children:"getDepositsAllocation"})}),"\n",(0,n.jsx)(t.p,{children:"Calculates the deposit allocation after the distribution of the specified number of deposits using the Min-First algorithm."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function getDepositsAllocation(uint256 _depositsCount) external view returns (\n\tuint256 allocated, uint256[] memory allocations\n)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_depositsCount"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"deposits to allocate between staking modules"})]})})]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"allocated"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"total staking module addresses"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"allocations"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256[]"})}),(0,n.jsx)(t.td,{children:"array of new total deposits between staking modules"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"getwithdrawalcredentials",children:(0,n.jsx)(t.code,{children:"getWithdrawalCredentials"})}),"\n",(0,n.jsx)(t.p,{children:"Get the withdrawal credentials."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function getWithdrawalCredentials() public view returns (bytes32)\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Returns:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"bytes32"})}),(0,n.jsx)(t.td,{children:"withdrawal credentials"})]})})]}),"\n",(0,n.jsx)(t.h2,{id:"write-methods",children:"Write methods"}),"\n",(0,n.jsx)(t.h3,{id:"addstakingmodule",children:(0,n.jsx)(t.code,{children:"addStakingModule"})}),"\n",(0,n.jsx)(t.p,{children:"Register a staking module."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function addStakingModule(\n\tstring calldata _name,\n\taddress _stakingModuleAddress,\n\tuint256 _targetShare,\n\tuint256 _stakingModuleFee,\n\tuint256 _treasuryFee\n) external;\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_name"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"string"})}),(0,n.jsx)(t.td,{children:"human-readable name of the module"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleAddress"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"address"})}),(0,n.jsx)(t.td,{children:"address of the module contract"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_targetShare"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uin256"})}),(0,n.jsx)(t.td,{children:"module target share"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleFee"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uin256"})}),(0,n.jsx)(t.td,{children:"module fee"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_treasuryFee"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"module treasury fee"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"updatestakingmodule",children:(0,n.jsx)(t.code,{children:"updateStakingModule"})}),"\n",(0,n.jsx)(t.p,{children:"Register a staking module."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function updateStakingModule(\n\tuint256 _stakingModuleId,\n\tuint256 _targetShare,\n\tuint256 _stakingModuleFee,\n\tuint256 _treasuryFee\n) external;\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"address"})}),(0,n.jsx)(t.td,{children:"id of the module"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_targetShare"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uin256"})}),(0,n.jsx)(t.td,{children:"updated module target share"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleFee"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uin256"})}),(0,n.jsx)(t.td,{children:"updated module fee"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_treasuryFee"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"updated module treasury fee"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"updatetargetvalidatorslimits",children:(0,n.jsx)(t.code,{children:"updateTargetValidatorsLimits"})}),"\n",(0,n.jsx)(t.p,{children:"Updates the limit of the validators that can be used for deposit."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function updateTargetValidatorsLimits(\n\tuint256 _stakingModuleId,\n\tuint256 _nodeOperatorId,\n\tbool _isTargetLimitActive,\n\tuint256 _targetLimit\n) external;\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uin256"})}),(0,n.jsx)(t.td,{children:"id of the module"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_nodeOperatorId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uin256"})}),(0,n.jsx)(t.td,{children:"id of the node operator"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_isTargetLimitActive"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"bool"})}),(0,n.jsx)(t.td,{children:"active flag"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_targetLimit"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"target limit of the node operator"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"updaterefundedvalidatorscount",children:(0,n.jsx)(t.code,{children:"updateRefundedValidatorsCount"})}),"\n",(0,n.jsx)(t.p,{children:"Updates the number of the refunded validators in the staking module with the given node operator id."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function updateRefundedValidatorsCount(\n\tuint256 _stakingModuleId,\n\tuint256 _nodeOperatorId,\n\tuint256 _refundedValidatorsCount,\n) external;\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uin256"})}),(0,n.jsx)(t.td,{children:"id of the module"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_nodeOperatorId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uin256"})}),(0,n.jsx)(t.td,{children:"id of the node operator"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_refundedValidatorsCount"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uint256"})}),(0,n.jsx)(t.td,{children:"new number of refunded validators of the node operator"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"reportrewardsminted",children:(0,n.jsx)(t.code,{children:"reportRewardsMinted"})}),"\n",(0,n.jsx)(t.p,{children:"Updates the number of the refunded validators in the staking module with the given node operator id."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function reportRewardsMinted(\n\tuint256[] calldata _stakingModuleIds,\n\tuint256[] calldata _totalShares,\n) external;\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleIds"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uin256[]"})}),(0,n.jsx)(t.td,{children:"list of the reported staking module ids"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_totalShares"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uin256[]"})}),(0,n.jsx)(t.td,{children:"total shares minted to the given staking modules"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"updateexitedvalidatorscountbystakingmodule",children:(0,n.jsx)(t.code,{children:"updateExitedValidatorsCountByStakingModule"})}),"\n",(0,n.jsx)(t.p,{children:"Update total numbers of exited validators for staking modules with the specified module ids."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function reportRewardsMinted(\n\tuint256[] calldata _stakingModuleIds,\n\tuint256[] calldata _exitedValidatorsCounts,\n) external;\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleIds"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uin256[]"})}),(0,n.jsx)(t.td,{children:"list of the reported staking module ids"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_exitedValidatorsCounts"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uin256[]"})}),(0,n.jsx)(t.td,{children:"new counts of exited validators for the specified staking modules"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"reportstakingmoduleexitedvalidatorscountbynodeoperator",children:(0,n.jsx)(t.code,{children:"reportStakingModuleExitedValidatorsCountByNodeOperator"})}),"\n",(0,n.jsx)(t.p,{children:"Updates exited validators counts per node operator for the staking module with the specified id."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function reportStakingModuleExitedValidatorsCountByNodeOperator(\n\tuint256 _stakingModuleId,\n\tbytes calldata _nodeOperatorIds,\n\tbytes calldata _exitedValidatorsCounts,\n) external;\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uin256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_nodeOperatorIds"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"bytes"})}),(0,n.jsx)(t.td,{children:"ids of the node operators"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_exitedValidatorsCounts"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"bytes"})}),(0,n.jsx)(t.td,{children:"new counts of exited validators for the specified node operators"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"unsafesetexitedvalidatorscount",children:(0,n.jsx)(t.code,{children:"unsafeSetExitedValidatorsCount"})}),"\n",(0,n.jsx)(t.p,{children:"Sets exited validators count for the given module and given node operator in that module without performing critical safety checks, e.g. that exited validators count cannot decrease."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function unsafeSetExitedValidatorsCount(\n\tuint256 _stakingModuleId,\n\tbytes calldata _nodeOperatorIds,\n\tbool _triggerUpdateFinish,\n\tValidatorsCountsCorrection memory _correction\n) external;\n"})}),"\n",(0,n.jsxs)(t.p,{children:["where ",(0,n.jsx)(t.code,{children:"ValidatorsCountsCorrection"})," is a struct as seen below,"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"struct ValidatorsCountsCorrection {\n\t/// @notice The expected current number of exited validators of the module that is\n\t/// being corrected.\n\tuint256 currentModuleExitedValidatorsCount;\n\t/// @notice The expected current number of exited validators of the node operator\n\t/// that is being corrected.\n\tuint256 currentNodeOperatorExitedValidatorsCount;\n\t/// @notice The expected current number of stuck validators of the node operator\n\t/// that is being corrected.\n\tuint256 currentNodeOperatorStuckValidatorsCount;\n\t/// @notice The corrected number of exited validators of the module.\n\tuint256 newModuleExitedValidatorsCount;\n\t/// @notice The corrected number of exited validators of the node operator.\n\tuint256 newNodeOperatorExitedValidatorsCount;\n\t/// @notice The corrected number of stuck validators of the node operator.\n\tuint256 newNodeOperatorStuckValidatorsCount;\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uin256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_nodeOperatorIds"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"bytes"})}),(0,n.jsx)(t.td,{children:"ids of the node operators"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_triggerUpdateFinish"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"bool"})}),(0,n.jsxs)(t.td,{children:["flag to call ",(0,n.jsx)(t.code,{children:"onExitedAndStuckValidatorsCountsUpdated"})," on the module after applying the corrections"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_correction"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"ValidatorsCountsCorrection"})}),(0,n.jsx)(t.td,{children:"correction details"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"reportstakingmodulestuckvalidatorscountbynodeoperator",children:(0,n.jsx)(t.code,{children:"reportStakingModuleStuckValidatorsCountByNodeOperator"})}),"\n",(0,n.jsx)(t.p,{children:"Updates stuck validators counts per node operator for the staking module with the specified id."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function reportStakingModuleStuckValidatorsCountByNodeOperator(\n\tuint256 _stakingModuleId,\n\tbytes calldata _nodeOperatorIds,\n\tbytes calldata _stuckValidatorsCounts,\n) external;\n"})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Parameters:"})}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Name"}),(0,n.jsx)(t.th,{children:"Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stakingModuleId"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"uin256"})}),(0,n.jsx)(t.td,{children:"staking module id"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_nodeOperatorIds"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"bytes"})}),(0,n.jsx)(t.td,{children:"ids of the node operators"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"_stuckValidatorsCounts"})}),(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"bytes"})}),(0,n.jsx)(t.td,{children:"new counts of stuck validators for the specified node operators"})]})]})]}),"\n",(0,n.jsx)(t.h3,{id:"onvalidatorscountsbynodeoperatorreportingfinished",children:(0,n.jsx)(t.code,{children:"onValidatorsCountsByNodeOperatorReportingFinished"})}),"\n",(0,n.jsx)(t.p,{children:"Post-report hook called by the oracle when the second phase of data reporting finishes, i.e. when the oracle submitted the complete data on the stuck and exited validator counts per node operator for the current reporting frame."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-solidity",children:"function onValidatorsCountsByNodeOperatorReportingFinished() external;\n"})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,t,d)=>{d.d(t,{R:()=>r,x:()=>l});var n=d(6540);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);