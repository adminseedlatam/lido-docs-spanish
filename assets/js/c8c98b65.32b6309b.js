"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1571],{365:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=s(4848),t=s(8453);const i={},d="WithdrawalQueueERC721",l={id:"contracts/withdrawal-queue-erc721",title:"WithdrawalQueueERC721",description:"- Source code",source:"@site/docs/contracts/withdrawal-queue-erc721.md",sourceDirName:"contracts",slug:"/contracts/withdrawal-queue-erc721",permalink:"/contracts/withdrawal-queue-erc721",draft:!1,unlisted:!1,editUrl:"https://github.com/adminseedlatam/lido-docs-spanish/edit/main/docs/contracts/withdrawal-queue-erc721.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"NodeOperatorsRegistry",permalink:"/contracts/node-operators-registry"},next:{title:"WithdrawalVault",permalink:"/contracts/withdrawal-vault"}},a={},c=[{value:"What is WithdrawalQueueERC721?",id:"what-is-withdrawalqueueerc721",level:2},{value:"Request",id:"request",level:2},{value:"Finalization",id:"finalization",level:2},{value:"Claim",id:"claim",level:2},{value:"Standards",id:"standards",level:2},{value:"<code>ERC-721</code>-related Methods",id:"erc-721-related-methods",level:2},{value:"name()",id:"name",level:3},{value:"symbol()",id:"symbol",level:3},{value:"tokenURI()",id:"tokenuri",level:3},{value:"balanceOf()",id:"balanceof",level:3},{value:"ownerOf()",id:"ownerof",level:3},{value:"approve()",id:"approve",level:3},{value:"getApproved()",id:"getapproved",level:3},{value:"setApprovalForAll()",id:"setapprovalforall",level:3},{value:"isApprovedForAll()",id:"isapprovedforall",level:3},{value:"safeTransferFrom()",id:"safetransferfrom",level:3},{value:"transferFrom()",id:"transferfrom",level:3},{value:"getBaseUri()",id:"getbaseuri",level:3},{value:"getNFTDescriptorAddress()",id:"getnftdescriptoraddress",level:3},{value:"<code>ERC-165</code>-related Methods",id:"erc-165-related-methods",level:2},{value:"supportsInterface()",id:"supportsinterface",level:3},{value:"Queue-related Methods",id:"queue-related-methods",level:2},{value:"requestWithdrawals()",id:"requestwithdrawals",level:3},{value:"requestWithdrawalsWstETH()",id:"requestwithdrawalswsteth",level:3},{value:"requestWithdrawalsWithPermit()",id:"requestwithdrawalswithpermit",level:3},{value:"requestWithdrawalsWstETHWithPermit()",id:"requestwithdrawalswstethwithpermit",level:3},{value:"getWithdrawalRequests()",id:"getwithdrawalrequests",level:3},{value:"getWithdrawalStatus()",id:"getwithdrawalstatus",level:3},{value:"getClaimableEther()",id:"getclaimableether",level:3},{value:"claimWithdrawalsTo()",id:"claimwithdrawalsto",level:3},{value:"claimWithdrawals()",id:"claimwithdrawals",level:3},{value:"claimWithdrawal()",id:"claimwithdrawal",level:3},{value:"findCheckpointHints()",id:"findcheckpointhints",level:3},{value:"isBunkerModeActive()",id:"isbunkermodeactive",level:3},{value:"bunkerModeSinceTimestamp()",id:"bunkermodesincetimestamp",level:3},{value:"getLastRequestId()",id:"getlastrequestid",level:3},{value:"getLastFinalizedRequestId()",id:"getlastfinalizedrequestid",level:3},{value:"getLockedEtherAmount()",id:"getlockedetheramount",level:3},{value:"getLastCheckpointIndex()",id:"getlastcheckpointindex",level:3},{value:"unfinalizedRequestNumber()",id:"unfinalizedrequestnumber",level:3},{value:"unfinalizedStETH()",id:"unfinalizedsteth",level:3},{value:"calculateFinalizationBatches()",id:"calculatefinalizationbatches",level:3},{value:"prefinalize()",id:"prefinalize",level:3},{value:"Protected methods",id:"protected-methods",level:2},{value:"Roles",id:"roles",level:3},{value:"finalize()",id:"finalize",level:3},{value:"pauseFor()",id:"pausefor",level:3},{value:"pauseUntil()",id:"pauseuntil",level:3},{value:"resume()",id:"resume",level:3},{value:"onOracleReport()",id:"onoraclereport",level:3},{value:"setBaseUri()",id:"setbaseuri",level:3},{value:"setNFTDescriptorAddress()",id:"setnftdescriptoraddress",level:3}];function o(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"withdrawalqueueerc721",children:"WithdrawalQueueERC721"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/lidofinance/lido-dao/blob/master/contracts/0.8.9/WithdrawalQueueERC721.sol",children:"Source code"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://etherscan.io/address/0x889edC2eDab5f40e902b864aD4d7AdE8E412F9B1",children:"Deployed contract"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["A FIFO queue for ",(0,r.jsx)(n.code,{children:"stETH"})," withdrawal requests and an ",(0,r.jsx)(n.code,{children:"unstETH"})," NFT implementation representing the position in the queue."]}),"\n",(0,r.jsxs)(n.p,{children:["Access to lever methods is restricted using the functionality of the\n",(0,r.jsx)(n.a,{href:"https://github.com/lidofinance/lido-dao/blob/master/contracts/0.8.9/utils/access/AccessControlEnumerable.sol",children:"AccessControlEnumerable"}),"\ncontract and a bunch of ",(0,r.jsx)(n.a,{href:"#roles",children:"granular roles"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"what-is-withdrawalqueueerc721",children:"What is WithdrawalQueueERC721?"}),"\n",(0,r.jsxs)(n.p,{children:["This contract is a main entry point to exchange ",(0,r.jsx)(n.code,{children:"stETH"})," for underlying ether directly via Lido protocol.\nIt is responsible for:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"managing a queue of withdrawal requests"}),"\n",(0,r.jsxs)(n.li,{children:["committing withdrawal request finalization as a part of the ",(0,r.jsx)(n.a,{href:"/contracts/accounting-oracle",children:"AccountingOracle"})," report"]}),"\n",(0,r.jsxs)(n.li,{children:["storing ",(0,r.jsx)(n.code,{children:"stETH"})," before and ether after the finalization"]}),"\n",(0,r.jsx)(n.li,{children:"transfer reserved ether to the user upon the claim"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Also, the contract is ",(0,r.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-721",children:"ERC-721"})," ",(0,r.jsx)(n.code,{children:"unstETH"})," NFT with\nmetadata extension representing the right to claim underlying ether once the request is\nfinalized. This NFT is minted upon request and burned on the claim. ",(0,r.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-4906",children:"ERC-4906"}),"\nis used to update the metadata as soon as the finalization status of the request is changed."]}),"\n",(0,r.jsx)(n.h2,{id:"request",children:"Request"}),"\n",(0,r.jsxs)(n.p,{children:["To request a withdrawal, one needs to approve the amount of ",(0,r.jsx)(n.code,{children:"stETH"})," or ",(0,r.jsx)(n.code,{children:"wstETH"})," to this contract or sign the\n",(0,r.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-2612",children:"ERC-2612 Permit"}),", and then call the appropriate ",(0,r.jsx)(n.code,{children:"requestWithdrawals*"})," method."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"minimal"})," amount for a request is ",(0,r.jsx)(n.code,{children:"100 wei"}),", and the ",(0,r.jsx)(n.strong,{children:"maximum"})," is ",(0,r.jsx)(n.code,{children:"1000 eth"}),". More significant amounts should\nbe split into several requests, which allows us to avoid clogging the queue with an extra large request."]}),"\n",(0,r.jsxs)(n.p,{children:["During this call, the request is placed in the queue, and the related ",(0,r.jsx)(n.code,{children:"unstETH"})," NFT is minted. The following structure\nrepresents the request:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"struct WithdrawalRequestStatus {\n    uint256 amountOfStETH;\n    uint256 amountOfShares;\n    address owner;\n    uint256 timestamp;\n    bool isFinalized;\n    bool isClaimed;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"where"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"amountOfStETH"})})," \u2014 the number of ",(0,r.jsx)(n.code,{children:"stETH"})," tokens transferred to the contract upon request"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"amountOfShares"})})," \u2014 the number of underlying shares corresponding to transferred ",(0,r.jsx)(n.code,{children:"stETH"})," tokens.\nSee ",(0,r.jsx)(n.a,{href:"/contracts/lido#rebase",children:"Lido rebasing chapter"})," to learn about the shares mechanic"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"owner"})})," \u2014 the owner's address for this request. The owner is also a holder of the ",(0,r.jsx)(n.code,{children:"unstETH"})," NFT\nand can transfer the ownership and claim the underlying ether once finalized"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"timestamp"})})," \u2014 the creation time of the request"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"isFinalized"})})," \u2014 finalization status of the request; finalized requests are available to claim"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"isClaimed"})})," \u2014 the claim status of the request. Once claimed, NFT is burned, and\nthe request is not available to claim again"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["The amount of ether that will be withdrawn is limited to the number of ",(0,r.jsx)(n.code,{children:"stETH"})," tokens transferred to this contract\nat the moment of request. So, the user will not receive the rewards for the period of time while their tokens stay in the queue."]})}),"\n",(0,r.jsx)(n.h2,{id:"finalization",children:"Finalization"}),"\n",(0,r.jsxs)(n.p,{children:["After filing a withdrawal request, one can only claim it once finalization occurs.\n",(0,r.jsx)(n.a,{href:"/contracts/accounting-oracle",children:"Accounting Oracle"})," report finalizes a batch of withdrawal requests,\nchoosing the ",(0,r.jsx)(n.code,{children:"_maxShareRate"})," and the size of the batch taking in account following factors:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If there is enough ether to fulfill the request. Ether can be obtained from the Lido buffer, which is filled\nfrom the new users' stake, Beacon chain partial and full withdrawals, protocol tips, and MEV rewards.\nWithdrawals are prioritized over deposits, so ether can't be deposited to the Beacon chain if some withdrawal requests\ncan be fulfilled."}),"\n",(0,r.jsx)(n.li,{children:"if enough time has passed since the withdrawal request was placed in the queue (timelock)"}),"\n",(0,r.jsx)(n.li,{children:"If there was some massive loss for the protocol on the Beacon Chain side since the withdrawal request was filed.\nIt can lead to finalization by the rate lower than 1:1 if the loss will be high enough to be not covered\nwith daily rewards (never happened before)"}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"To put it simply, token holders don't receive rewards but still take risks during withdrawal. Rewards, acquired\nsince the stETH was locked in the WithdrawalQueue, are burned upon the finalization, effectively distributing them\namong the other token holders."})}),"\n",(0,r.jsxs)(n.p,{children:["So, the finalization sets the final value of the request, locks ether on the balance of this contract,\nand burns the underlying ",(0,r.jsx)(n.code,{children:"stETH"})," and the queue may look like this in arbitrary moment:"]}),"\n",(0,r.jsx)(n.mermaid,{value:"graph LR\n    subgraph queue\n    direction LR\n    B---D\n    subgraph unfinalized;\n        A[1 stETH]---B[1.1 stETH]\n    end\n    subgraph finalized;\n        D(0.3 ETH)---E(1000 ETH)\n    end\n    end\n\n    classDef gr fill:#d0f0c0,stroke:#333,stroke-width:3px;;\n    classDef r fill:#fa8072,stroke:#333,stroke-width:3px;;\n\n    class A,B r;\n    class D,E gr;\n"}),"\n",(0,r.jsx)(n.h2,{id:"claim",children:"Claim"}),"\n",(0,r.jsx)(n.p,{children:"When the request is finalized, it can be claimed by the current owner, transferring the reserved amount of ether to\nthe recipient's address and burning the withdrawal NFT."}),"\n",(0,r.jsxs)(n.p,{children:["To see if the request is claimable, one can get its status using ",(0,r.jsx)(n.code,{children:"getWithdrawalStatus()"})," or subscribe to\nthe event ",(0,r.jsx)(n.code,{children:"WithdrawalsFinalized(uint256 from, uint256 to, ...)"}),", which is emitted once the batch of requests\nwith ids in the range ",(0,r.jsx)(n.code,{children:"(from, to]"})," is finalized."]}),"\n",(0,r.jsx)(n.h2,{id:"standards",children:"Standards"}),"\n",(0,r.jsx)(n.p,{children:"Contract implements the following Ethereum standards:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-721",children:"ERC-721: Non-Fungible Token Standard"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-165",children:"ERC-165: Standard Interface Detection"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-4906",children:"ERC-4906: EIP-721 Metadata Update Extension"})}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"erc-721-related-methods",children:[(0,r.jsx)(n.code,{children:"ERC-721"}),"-related Methods"]}),"\n",(0,r.jsx)(n.h3,{id:"name",children:"name()"}),"\n",(0,r.jsx)(n.p,{children:"Returns the token collection name."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function name() view returns (string memory)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"symbol",children:"symbol()"}),"\n",(0,r.jsx)(n.p,{children:"Returns the token collection symbol."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function symbol() view returns (string memory)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"tokenuri",children:"tokenURI()"}),"\n",(0,r.jsxs)(n.p,{children:["Returns the Uniform Resource Identifier (URI) for the ",(0,r.jsx)(n.code,{children:"_requestId"})," token. Returns an empty string if no base URI\nand no ",(0,r.jsx)(n.code,{children:"NFTDescriptor"})," address are set."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function tokenURI(uint256 _requestId) view returns (string memory)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"balanceof",children:"balanceOf()"}),"\n",(0,r.jsxs)(n.p,{children:["Returns the number of tokens in the ",(0,r.jsx)(n.code,{children:"_owner"}),"'s account."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function balanceOf(address _owner) view returns (uint256 balance)\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Reverts if ",(0,r.jsx)(n.code,{children:"_owner"})," is zero address"]})}),"\n",(0,r.jsx)(n.h3,{id:"ownerof",children:"ownerOf()"}),"\n",(0,r.jsxs)(n.p,{children:["Returns the owner of the ",(0,r.jsx)(n.code,{children:"_requestId"})," token."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function ownerOf(uint256 _requestId) view returns (address owner)\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_requestId"})," request must exist."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_requestId"})," request must not be claimed."]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"approve",children:"approve()"}),"\n",(0,r.jsxs)(n.p,{children:["Gives permission to ",(0,r.jsx)(n.code,{children:"_to"})," to transfer the ",(0,r.jsx)(n.code,{children:"_requestId"})," token to another account. The approval is cleared when\nthe token is transferred."]}),"\n",(0,r.jsxs)(n.p,{children:["Emits an ",(0,r.jsx)(n.code,{children:"Approval"})," event."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function approve(address _to, uint256 _requestId)\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The caller must own the token or be an approved operator."}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_requestId"})," must exist."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_to"})," must not be the owner"]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"getapproved",children:"getApproved()"}),"\n",(0,r.jsxs)(n.p,{children:["Returns the account approved for the ",(0,r.jsx)(n.code,{children:"_requestId"})," token."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function getApproved(uint256 _requestId) view returns (address)\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Reverts if no ",(0,r.jsx)(n.code,{children:"_requestId"})," exists"]})}),"\n",(0,r.jsx)(n.h3,{id:"setapprovalforall",children:"setApprovalForAll()"}),"\n",(0,r.jsxs)(n.p,{children:["Approve or remove ",(0,r.jsx)(n.code,{children:"_operator"})," as an operator for the caller. Operators can call ",(0,r.jsx)(n.code,{children:"transferFrom"})," or ",(0,r.jsx)(n.code,{children:"safeTransferFrom"}),"\nfor any token owned by the caller."]}),"\n",(0,r.jsxs)(n.p,{children:["Emits an ",(0,r.jsx)(n.code,{children:"ApprovalForAll"})," event."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function setApprovalForAll(address _operator, bool _approved)\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Reverts if ",(0,r.jsx)(n.code,{children:"msg.sender"})," is equal to ",(0,r.jsx)(n.code,{children:"_operator"})]})}),"\n",(0,r.jsx)(n.h3,{id:"isapprovedforall",children:"isApprovedForAll()"}),"\n",(0,r.jsxs)(n.p,{children:["Returns ",(0,r.jsx)(n.code,{children:"true"})," if the ",(0,r.jsx)(n.code,{children:"_operator"})," is allowed to manage all of the assets of the ",(0,r.jsx)(n.code,{children:"_owner"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function isApprovedForAll(address _owner, address _operator) view returns (bool)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"safetransferfrom",children:"safeTransferFrom()"}),"\n",(0,r.jsxs)(n.p,{children:["Safely transfers the ",(0,r.jsx)(n.code,{children:"_requestId"})," token from ",(0,r.jsx)(n.code,{children:"_from"})," to ",(0,r.jsx)(n.code,{children:"_to"}),", checking first that contract recipients are aware of\nthe ERC721 protocol to prevent tokens from being forever locked.\nIf a version with ",(0,r.jsx)(n.code,{children:"_data"})," parameter is used, it passed to ",(0,r.jsx)(n.code,{children:"IERC721Receiver.onERC721Received()"})," of the target\nsmart contract as an argument."]}),"\n",(0,r.jsxs)(n.p,{children:["Emits a ",(0,r.jsx)(n.code,{children:"Transfer"})," event."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function safeTransferFrom(address _from, address _to, uint256 _requestId)\nfunction safeTransferFrom(address _from, address _to, uint256 _requestId, bytes memory _data)\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_from"})," cannot be the zero address."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_to"})," cannot be the zero address."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_requestId"})," token must exist and be owned by ",(0,r.jsx)(n.code,{children:"_from"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If the caller is not ",(0,r.jsx)(n.code,{children:"_from"}),", it must have been allowed to move this token by either ",(0,r.jsx)(n.code,{children:"approve()"})," or ",(0,r.jsx)(n.code,{children:"setApprovalForAll()"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If ",(0,r.jsx)(n.code,{children:"_to"})," refers to a smart contract, it must implement ",(0,r.jsx)(n.code,{children:"IERC721Receiver"})," interface"]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"transferfrom",children:"transferFrom()"}),"\n",(0,r.jsxs)(n.p,{children:["Transfers the ",(0,r.jsx)(n.code,{children:"_requestId"})," token from ",(0,r.jsx)(n.code,{children:"_from"})," to ",(0,r.jsx)(n.code,{children:"_to"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Emits a ",(0,r.jsx)(n.code,{children:"Transfer"})," event."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"WARNING"}),": Usage of this method is discouraged, use ",(0,r.jsx)(n.code,{children:"safeTransferFrom()"})," whenever possible."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function transferFrom(address _from, address _to, uint256 _requestId)\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_from"})," cannot be the zero address."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_to"})," cannot be the zero address."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_requestId"})," token must be owned by ",(0,r.jsx)(n.code,{children:"_from"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If the caller is not ",(0,r.jsx)(n.code,{children:"_from"}),", it must be approved to move this token by either ",(0,r.jsx)(n.code,{children:"approve()"})," or ",(0,r.jsx)(n.code,{children:"setApprovalForAll()"}),"."]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"getbaseuri",children:"getBaseUri()"}),"\n",(0,r.jsxs)(n.p,{children:["Returns the base URI for computing token URI. If set, the resulting URI for each token will be the concatenation\nof the base URI and the ",(0,r.jsx)(n.code,{children:"_requestId"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function getBaseURI() view returns (string memory)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"getnftdescriptoraddress",children:"getNFTDescriptorAddress()"}),"\n",(0,r.jsxs)(n.p,{children:["Returns the address of the ",(0,r.jsx)(n.code,{children:"NFTDescriptor"})," contract responsible for the token URI generation."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function getNFTDescriptorAddress() view returns (address)\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"erc-165-related-methods",children:[(0,r.jsx)(n.code,{children:"ERC-165"}),"-related Methods"]}),"\n",(0,r.jsx)(n.h3,{id:"supportsinterface",children:"supportsInterface()"}),"\n",(0,r.jsxs)(n.p,{children:["Returns ",(0,r.jsx)(n.code,{children:"true"})," if this contract implements the interface defined by ",(0,r.jsx)(n.code,{children:"interfaceId"}),". See\nthe ",(0,r.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified",children:"ERC-165"})," to learn more about\nhow these ids are created."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function supportsInterface(bytes4 interfaceId) view returns (bool)\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This contract returns ",(0,r.jsx)(n.code,{children:"true"})," for ",(0,r.jsx)(n.code,{children:"IERC721"}),", ",(0,r.jsx)(n.code,{children:"IERC721Metadata"}),", ",(0,r.jsx)(n.code,{children:"IERC4906"}),", ",(0,r.jsx)(n.code,{children:"IAccessControlEnumerable"}),",\n",(0,r.jsx)(n.code,{children:"IAccessControl"})," and ",(0,r.jsx)(n.code,{children:"IERC165"})," itself."]})}),"\n",(0,r.jsx)(n.h2,{id:"queue-related-methods",children:"Queue-related Methods"}),"\n",(0,r.jsx)(n.h3,{id:"requestwithdrawals",children:"requestWithdrawals()"}),"\n",(0,r.jsxs)(n.p,{children:["Batch request the ",(0,r.jsx)(n.code,{children:"_amounts"})," of ",(0,r.jsx)(n.code,{children:"stETH"})," for withdrawal to the ",(0,r.jsx)(n.code,{children:"_owner"})," address. For each request, the respective\namount of ",(0,r.jsx)(n.code,{children:"stETH"})," is transferred to this contract address, and an ",(0,r.jsx)(n.code,{children:"unstETH"})," NFT is minted to the ",(0,r.jsx)(n.code,{children:"_owner"})," address."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function requestWithdrawals(uint256[] _amounts, address _owner) returns (uint256[] requestIds)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns the array of ids for each created request. Emits ",(0,r.jsx)(n.code,{children:"WithdrawalRequested"})," and ",(0,r.jsx)(n.code,{children:"Transfer"})," events."]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"withdrawals must not be paused"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stETH"})," balance of ",(0,r.jsx)(n.code,{children:"msg.sender"})," must be greater than or equal to the sum of all ",(0,r.jsx)(n.code,{children:"_amounts"})]}),"\n",(0,r.jsxs)(n.li,{children:["there must be approval from the ",(0,r.jsx)(n.code,{children:"msg.sender"})," to this contract address for the overall amount of ",(0,r.jsx)(n.code,{children:"stETH"})," token transfer"]}),"\n",(0,r.jsxs)(n.li,{children:["each amount in ",(0,r.jsx)(n.code,{children:"_amounts"})," must be greater than or equal to ",(0,r.jsx)(n.code,{children:"MIN_STETH_WITHDRAWAL_AMOUNT"})," and lower than or equal to ",(0,r.jsx)(n.code,{children:"MAX_STETH_WITHDRAWAL_AMOUNT"})]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"requestwithdrawalswsteth",children:"requestWithdrawalsWstETH()"}),"\n",(0,r.jsxs)(n.p,{children:["Batch request the ",(0,r.jsx)(n.code,{children:"_amounts"})," of ",(0,r.jsx)(n.code,{children:"wstETH"})," for withdrawal to the ",(0,r.jsx)(n.code,{children:"_owner"})," address. For each request,\nthe respective amount of ",(0,r.jsx)(n.code,{children:"wstETH"})," is transferred to this contract address, unwrapped to ",(0,r.jsx)(n.code,{children:"stETH"}),",\nand an ",(0,r.jsx)(n.code,{children:"unstETH"})," NFT is minted to the ",(0,r.jsx)(n.code,{children:"_owner"})," address."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function requestWithdrawalsWstETH(uint256[] _amounts, address _owner) returns (uint256[] requestIds)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns the array of ids for each created request. Emits ",(0,r.jsx)(n.code,{children:"WithdrawalRequested"})," and ",(0,r.jsx)(n.code,{children:"Transfer"})," events."]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"withdrawals must not be paused"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"wstETH"})," balance of ",(0,r.jsx)(n.code,{children:"msg.sender"})," must be greater than or equal to the sum of all ",(0,r.jsx)(n.code,{children:"_amounts"})]}),"\n",(0,r.jsxs)(n.li,{children:["there must be approval from the ",(0,r.jsx)(n.code,{children:"msg.sender"})," to this contract address for the overall amount of ",(0,r.jsx)(n.code,{children:"wstETH"})," token transfer"]}),"\n",(0,r.jsxs)(n.li,{children:["each amount in ",(0,r.jsx)(n.code,{children:"_amounts"})," must have ",(0,r.jsx)(n.code,{children:"getPooledEthByShares(amount)"})," being greater than  ",(0,r.jsx)(n.code,{children:"MIN_STETH_WITHDRAWAL_AMOUNT"}),"\nand lower than ",(0,r.jsx)(n.code,{children:"MAX_STETH_WITHDRAWAL_AMOUNT"})]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"requestwithdrawalswithpermit",children:"requestWithdrawalsWithPermit()"}),"\n",(0,r.jsxs)(n.p,{children:["Batch request the ",(0,r.jsx)(n.code,{children:"_amounts"})," of ",(0,r.jsx)(n.code,{children:"stETH"})," for withdrawal to the ",(0,r.jsx)(n.code,{children:"_owner"})," address. For each request,\nthe respective amount of ",(0,r.jsx)(n.code,{children:"stETH"})," is transferred to this contract address,\nand an ",(0,r.jsx)(n.code,{children:"unstETH"})," NFT is minted to the ",(0,r.jsx)(n.code,{children:"_owner"})," address. ",(0,r.jsx)(n.code,{children:"ERC-2612"})," permit is used to approve the token transfer."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function requestWithdrawalsWithPermit(\n    uint256[] _amounts,\n    address _owner,\n    PermitInput _permit\n) returns (uint256[] requestIds)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["where ",(0,r.jsx)(n.code,{children:"_permit"})," is ",(0,r.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-2612",children:"ERC-2612"})," signed permit structure defined as:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"struct PermitInput {\n    uint256 value;\n    uint256 deadline;\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns the array of ids for each created request. Emits ",(0,r.jsx)(n.code,{children:"WithdrawalRequested"})," and ",(0,r.jsx)(n.code,{children:"Transfer"})," events."]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"withdrawals must not be paused"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"stETH"})," balance of ",(0,r.jsx)(n.code,{children:"msg.sender"})," must be greater than or equal to the sum of all ",(0,r.jsx)(n.code,{children:"_amounts"})]}),"\n",(0,r.jsxs)(n.li,{children:["permit must have a valid signature, ",(0,r.jsx)(n.code,{children:"value"})," greater than the sum of all ",(0,r.jsx)(n.code,{children:"_amounts"}),", and the ",(0,r.jsx)(n.code,{children:"deadline"})," not expired"]}),"\n",(0,r.jsxs)(n.li,{children:["each amount in ",(0,r.jsx)(n.code,{children:"_amounts"})," must be greater than or equal to ",(0,r.jsx)(n.code,{children:"MIN_STETH_WITHDRAWAL_AMOUNT"})," and lower than or equal to ",(0,r.jsx)(n.code,{children:"MAX_STETH_WITHDRAWAL_AMOUNT"})]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"requestwithdrawalswstethwithpermit",children:"requestWithdrawalsWstETHWithPermit()"}),"\n",(0,r.jsxs)(n.p,{children:["Batch request the ",(0,r.jsx)(n.code,{children:"_amounts"})," of ",(0,r.jsx)(n.code,{children:"wstETH"})," for withdrawal to the ",(0,r.jsx)(n.code,{children:"_owner"})," address. For each request,\nthe respective amount of ",(0,r.jsx)(n.code,{children:"wstETH"})," is transferred to this contract address, unwrapped to ",(0,r.jsx)(n.code,{children:"stETH"}),",\nand an ",(0,r.jsx)(n.code,{children:"unstETH"})," NFT is minted to the ",(0,r.jsx)(n.code,{children:"_owner"})," address.",(0,r.jsx)(n.code,{children:"ERC-2612"})," permit is used to approve the token transfer."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function requestWithdrawalsWstETHWithPermit(\n  uint256[] _amounts,\n  address _owner,\n  PermitInput _permit\n) returns (uint256[] requestIds)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["where ",(0,r.jsx)(n.code,{children:"_permit"})," is ",(0,r.jsx)(n.a,{href:"https://eips.ethereum.org/EIPS/eip-2612",children:"ERC-2612"})," signed permit structure defined as:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"struct PermitInput {\n    uint256 value;\n    uint256 deadline;\n    uint8 v;\n    bytes32 r;\n    bytes32 s;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns the array of ids for each created request. Emits ",(0,r.jsx)(n.code,{children:"WithdrawalRequested"})," and ",(0,r.jsx)(n.code,{children:"Transfer"})," events."]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"withdrawals must not be paused"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"wstETH"})," balance of ",(0,r.jsx)(n.code,{children:"msg.sender"})," must be greater than or equal to the sum of all ",(0,r.jsx)(n.code,{children:"_amounts"})]}),"\n",(0,r.jsxs)(n.li,{children:["permit must have a valid signature, ",(0,r.jsx)(n.code,{children:"value"})," greater than the sum of all ",(0,r.jsx)(n.code,{children:"_amounts"}),", and the ",(0,r.jsx)(n.code,{children:"deadline"})," not expired"]}),"\n",(0,r.jsxs)(n.li,{children:["each amount in ",(0,r.jsx)(n.code,{children:"_amounts"})," must have ",(0,r.jsx)(n.code,{children:"getPooledEthByShares(amount)"})," being greater than  ",(0,r.jsx)(n.code,{children:"MIN_STETH_WITHDRAWAL_AMOUNT"}),"\nand lower than ",(0,r.jsx)(n.code,{children:"MAX_STETH_WITHDRAWAL_AMOUNT"})]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"getwithdrawalrequests",children:"getWithdrawalRequests()"}),"\n",(0,r.jsxs)(n.p,{children:["Returns all withdrawal requests that belong to the ",(0,r.jsx)(n.code,{children:"_owner"})," address."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function getWithdrawalRequests(address _owner) view returns (uint256[] requestsIds)\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsx)(n.p,{children:"This operation will copy the entire storage to memory, which can be quite expensive. This method is designed to mostly\nbe used by view accessors that are queried without gas fees. Developers should keep in mind that this function has an\nunbounded cost, and using it as part of a state-changing function may render the function uncallable if the set grows\nto a point where copying to memory consumes too much gas to fit in a block."})}),"\n",(0,r.jsx)(n.h3,{id:"getwithdrawalstatus",children:"getWithdrawalStatus()"}),"\n",(0,r.jsxs)(n.p,{children:["Returns ",(0,r.jsx)(n.code,{children:"statuses"})," for requests with ids in ",(0,r.jsx)(n.code,{children:"_requestIds"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function getWithdrawalStatus(uint256[] _requestIds)\n    view\n    returns (WithdrawalRequestStatus[] statuses)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Returns an array of ",(0,r.jsx)(n.code,{children:"WithdrawalRequestStatus"})," structures, defined as:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"struct WithdrawalRequestStatus {\n    uint256 amountOfStETH;\n    uint256 amountOfShares;\n    address owner;\n    uint256 timestamp;\n    bool isFinalized;\n    bool isClaimed;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"where"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"amountOfStETH"})})," \u2014 the number of ",(0,r.jsx)(n.code,{children:"stETH"})," tokens transferred to the contract upon request"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"amountOfShares"})})," \u2014 the number of underlying shares corresponding to transferred ",(0,r.jsx)(n.code,{children:"stETH"})," tokens.\nSee ",(0,r.jsx)(n.a,{href:"/contracts/lido#rebase",children:"Lido rebasing chapter"})," to learn about the shares mechanic"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"owner"})})," \u2014 the owner's address for this request. The owner is also a holder of the ",(0,r.jsx)(n.code,{children:"unstETH"})," NFT\nand can transfer the ownership and claim the underlying ether once finalized"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"timestamp"})})," \u2014 the creation time of the request"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"isFinalized"})})," \u2014 finalization status of the request; finalized requests are available to claim"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"isClaimed"})})," \u2014 the claim status of the request. Once claimed, NFT is burned, and the request\nis not available to claim again"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"getclaimableether",children:"getClaimableEther()"}),"\n",(0,r.jsx)(n.p,{children:"Returns amounts of ether available for claiming for each provided request id."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function getClaimableEther(uint256[] _requestIds, uint256[] _hints)\n    view\n    returns (uint256[] claimableEthValues)\n"})}),"\n",(0,r.jsx)(n.p,{children:"where"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_requestIds"})})," \u2014 the array of request id to check the claimable ether for"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_hints"})})," \u2014 checkpoint hint for each request id. Can be obtained by calling ",(0,r.jsx)(n.a,{href:"#findcheckpointhints",children:(0,r.jsx)(n.code,{children:"findCheckpointHints()"})})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Returns the array of ether amounts available for claiming for each request id. The amount is equal to 0 if the request is not finalized or already claimed."}),"\n",(0,r.jsx)(n.h3,{id:"claimwithdrawalsto",children:"claimWithdrawalsTo()"}),"\n",(0,r.jsxs)(n.p,{children:["Claim a batch of withdrawal requests if they are finalized, sending ether to ",(0,r.jsx)(n.code,{children:"_recipient"})," address."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function claimWithdrawalsTo(uint256[] _requestIds, uint256[] _hints, address _recipient)\n"})}),"\n",(0,r.jsx)(n.p,{children:"where"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_requestIds"})})," \u2014 the array of request id to check the claimable ether for"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_hints"})})," \u2014 checkpoint hint for each request id. Can be obtained by calling ",(0,r.jsx)(n.a,{href:"#findcheckpointhints",children:(0,r.jsx)(n.code,{children:"findCheckpointHints()"})})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_recipient"})})," \u2014 the address of the recipient for claimed ether"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Emits a batch of ",(0,r.jsx)(n.code,{children:"Transfer"})," to zero address and ",(0,r.jsx)(n.code,{children:"WithdrawalClaimed"})," events."]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["all ",(0,r.jsx)(n.code,{children:"_requestIds"})," must exist, be finalized and not claimed"]}),"\n",(0,r.jsxs)(n.li,{children:["all ",(0,r.jsx)(n.code,{children:"_hints"})," must be valid for respective requests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"msg.sender"})," must be the owner of all the requests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_recipient"})," must not be zero"]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"claimwithdrawals",children:"claimWithdrawals()"}),"\n",(0,r.jsxs)(n.p,{children:["Claim a batch of withdrawal requests if they are finalized, sending ether to ",(0,r.jsx)(n.code,{children:"msg.sender"})," address."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function claimWithdrawals(uint256[] _requestIds, uint256[] _hints)\n"})}),"\n",(0,r.jsx)(n.p,{children:"where"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_requestIds"})})," \u2014 the array of request id to check the claimable ether for"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_hints"})})," \u2014 checkpoint hint for each request id. Can be obtained by calling ",(0,r.jsx)(n.a,{href:"#findcheckpointhints",children:(0,r.jsx)(n.code,{children:"findCheckpointHints()"})})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Emits a batch of ",(0,r.jsx)(n.code,{children:"Transfer"})," to zero address and ",(0,r.jsx)(n.code,{children:"WithdrawalClaimed"})," events."]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["all ",(0,r.jsx)(n.code,{children:"_requestIds"})," must exist, be finalized and not claimed"]}),"\n",(0,r.jsxs)(n.li,{children:["all ",(0,r.jsx)(n.code,{children:"_hints"})," must be valid for respective requests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"msg.sender"})," must be the owner of all the requests"]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"claimwithdrawal",children:"claimWithdrawal()"}),"\n",(0,r.jsxs)(n.p,{children:["Claims the ",(0,r.jsx)(n.code,{children:"_requestId"})," withdrawal request, sending ether to ",(0,r.jsx)(n.code,{children:"msg.sender"})," address."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function claimWithdrawal(uint256 _requestId)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Emits a ",(0,r.jsx)(n.code,{children:"Transfer"})," to zero address and ",(0,r.jsx)(n.code,{children:"WithdrawalClaimed"})," event."]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"msg.sender"})," must be the owner of the ",(0,r.jsx)(n.code,{children:"_requestId"})," request"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_requestId"})," request must exist, be finalized and not claimed"]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"findcheckpointhints",children:"findCheckpointHints()"}),"\n",(0,r.jsxs)(n.p,{children:["Returns an array of hints for the given ",(0,r.jsx)(n.code,{children:"_requestIds"})," searching among the checkpoints with indices\nin the range  ",(0,r.jsx)(n.code,{children:"[_firstIndex, _lastIndex]"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function findCheckpointHints(uint256[] _requestIds, uint256 _firstIndex, uint256 _lastIndex)\n    view\n    returns (uint256[] hintIds)\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Array of request ids must be sorted"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_firstIndex"})," must be greater than 0, because checkpoint list is 1-based array"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_lastIndex"})," must be less than or equal to ",(0,r.jsx)(n.a,{href:"#getlastcheckpointindex",children:(0,r.jsx)(n.code,{children:"getLastCheckpointIndex()"})})]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"isbunkermodeactive",children:"isBunkerModeActive()"}),"\n",(0,r.jsxs)(n.p,{children:["Returns ",(0,r.jsx)(n.code,{children:"true"})," if bunker mode is active."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function isBunkerModeActive() view returns (bool)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"bunkermodesincetimestamp",children:"bunkerModeSinceTimestamp()"}),"\n",(0,r.jsxs)(n.p,{children:["Returns the timestamp of the last bunker mode activation, if it's active now and\n",(0,r.jsx)(n.code,{children:"BUNKER_MODE_DISABLED_TIMESTAMP"})," if bunker mode is disabled (i.e., protocol in turbo mode)."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function bunkerModeSinceTimestamp() view returns (uint256)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"getlastrequestid",children:"getLastRequestId()"}),"\n",(0,r.jsx)(n.p,{children:"Returns the id of the last request in the queue."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function getLastRequestId() view returns (uint256)\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Requests are indexed from ",(0,r.jsx)(n.code,{children:"1"}),", so it returns ",(0,r.jsx)(n.code,{children:"0"})," if there are no requests in the queue."]})}),"\n",(0,r.jsx)(n.h3,{id:"getlastfinalizedrequestid",children:"getLastFinalizedRequestId()"}),"\n",(0,r.jsx)(n.p,{children:"Returns the id of the last finalized request in the queue."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function getLastFinalizedRequestId() view returns (uint256)\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Requests are indexed from ",(0,r.jsx)(n.code,{children:"1"}),", so it returns ",(0,r.jsx)(n.code,{children:"0"})," if there are no finalized requests in the queue."]})}),"\n",(0,r.jsx)(n.h3,{id:"getlockedetheramount",children:"getLockedEtherAmount()"}),"\n",(0,r.jsx)(n.p,{children:"Returns the amount of ether on the balance locked for withdrawal and available to claim."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function getLockedEtherAmount() view returns (uint256)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"getlastcheckpointindex",children:"getLastCheckpointIndex()"}),"\n",(0,r.jsx)(n.p,{children:"Returns the length of the checkpoint array. Last possible value for the hint."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function getLastCheckpointIndex() view returns (uint256)\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Checkpoints are indexed from ",(0,r.jsx)(n.code,{children:"1"}),", so it returns ",(0,r.jsx)(n.code,{children:"0"})," if there are no checkpoints yet."]})}),"\n",(0,r.jsx)(n.h3,{id:"unfinalizedrequestnumber",children:"unfinalizedRequestNumber()"}),"\n",(0,r.jsx)(n.p,{children:"Returns the number of unfinalized requests in the queue."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function unfinalizedRequestNumber() view returns (uint256)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"unfinalizedsteth",children:"unfinalizedStETH()"}),"\n",(0,r.jsxs)(n.p,{children:["Returns the amount of ",(0,r.jsx)(n.code,{children:"stETH"})," in the queue yet to be finalized."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function unfinalizedStETH() view returns (uint256)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"calculatefinalizationbatches",children:"calculateFinalizationBatches()"}),"\n",(0,r.jsxs)(n.p,{children:["View for offchain use by the oracle daemon that calculates how many requests can be finalized within the given budget,\ntime period, and share rate limits. Returned requests are split into batches. All requests belonging to one batch must\nhave their share rate above or below (or equal) to the ",(0,r.jsx)(n.code,{children:"_maxShareRate"}),". Below you can see an example of how 14 requests\nwith different share rates will be split into five batches by this method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:" ^ share rate\n |\n |         \u2022 \u2022\n |       \u2022    \u2022   \u2022 \u2022 \u2022\n |----------------------\u2022------   _maxShareRate\n |   \u2022          \u2022        \u2022 \u2022 \u2022\n | \u2022\n +-------------------------------\x3e requestId\n  | 1 |    2   |3|  4  |   5   |    batch number\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function calculateFinalizationBatches(\n    uint256 _maxShareRate,\n    uint256 _maxTimestamp,\n    uint256 _maxRequestsPerCall,\n    BatchesCalculationState _state\n) external view returns (BatchesCalculationState)\n"})}),"\n",(0,r.jsx)(n.p,{children:"where"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_maxShareRate"})})," \u2014 the max share rate (ETH per share) that will be used for the finalization (1e27 precision)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_maxTimestamp"})})," \u2014 the max timestamp of the request that can be finalized"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_maxRequestsPerCall"})})," \u2014 the max request number that can be processed per iteration"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_state"})})," \u2014 the current state of the calculation, represented with a ",(0,r.jsx)(n.code,{children:"BatchesCalculationState"})," structure:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"struct BatchesCalculationState {\n    uint256 remainingEthBudget;\n    bool finished;\n    uint256[MAX_BATCHES_LENGTH] batches;\n    uint256 batchesLength;\n}\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"remainingEthBudget"})})," \u2014 the currently remaining amount of ether. It must be set into the whole budget of\nthe finalization at the first call"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"finished"})})," \u2014 the flag that is set to ",(0,r.jsx)(n.code,{children:"true"})," if all requests are iterated on"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"batches"})})," \u2014 the resulting array of batches, each represented by the id of the last request in the batch"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"batchesLength"})})," \u2014 the length of the filled part of the ",(0,r.jsx)(n.code,{children:"batches"})," array"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Returns the current state of the finalization batch calculation."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This method is designed for iterative usage under gas limits. So, in the case of the number of withdrawals are\ntoo large to iterate over in one call, one can use this method repeatedly, passing the return value as an argument\nfor the next call as long as it returns ",(0,r.jsx)(n.code,{children:"finished"})," equal to ",(0,r.jsx)(n.code,{children:"false"})]})}),"\n",(0,r.jsx)(n.h3,{id:"prefinalize",children:"prefinalize()"}),"\n",(0,r.jsx)(n.p,{children:"Checks finalization batches and calculates the required amount of ether to lock and the number of shares to burn."}),"\n",(0,r.jsxs)(n.p,{children:["Designed to use during the oracle report to find the amount of ether to send along the ",(0,r.jsx)(n.code,{children:"finalize()"})," call."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function prefinalize(uint256[] _batches, uint256 _maxShareRate)\n    view\n    returns (uint256 ethToLock, uint256 sharesToBurn)\n"})}),"\n",(0,r.jsx)(n.p,{children:"where"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_batches"})})," \u2014 finalization batches calculated off-chain using ",(0,r.jsx)(n.code,{children:"calculateFinalizationBatches()"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_maxShareRate"})})," \u2014 max share rate (ETH per share) for request finalization (1e27 precision)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Returns"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"ethToLock"})})," \u2014 the amount of ether to be sent with ",(0,r.jsx)(n.code,{children:"finalize()"})," method"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"sharesToBurn"})})," \u2014 the number of shares to be burnt to match this finalization call"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"protected-methods",children:"Protected methods"}),"\n",(0,r.jsx)(n.h3,{id:"roles",children:"Roles"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FINALIZE_ROLE"})," \u2014 role to finalize withdrawal requests in the queue"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PAUSE_ROLE"})," \u2014 role to pause the withdrawal on the protocol"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RESUME_ROLE"})," \u2014 role to resume the withdrawal after being paused"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"ORACLE_ROLE"})," \u2014 role to provide required oracle-related data as the last report timestamp\nand if the protocol is in the bunker mode"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"MANAGE_TOKEN_URI_ROLE"})," \u2014 role to set the parameters for constructing the token URI: the base URI\nor ",(0,r.jsx)(n.code,{children:"NFTDescriptor"})," address"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"finalize",children:"finalize()"}),"\n",(0,r.jsxs)(n.p,{children:["Finalize requests from the last finalized one up to ",(0,r.jsx)(n.code,{children:"_lastRequestIdToBeFinalized"})," using ",(0,r.jsx)(n.code,{children:"_maxShareRate"}),"\nas a base share rate for ",(0,r.jsx)(n.code,{children:"stETH"})," and passing along some ether as ",(0,r.jsx)(n.code,{children:"msg.value"}),".\nThe amount of ether to send should be precalculated by the ",(0,r.jsx)(n.code,{children:"prefinalize()"})," method."]}),"\n",(0,r.jsxs)(n.p,{children:["Emits a ",(0,r.jsx)(n.code,{children:"BatchMetadataUpdate"})," and a ",(0,r.jsx)(n.code,{children:"WithdrawalsFinalized"})," events."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function finalize(uint256 _lastRequestIdToBeFinalized, uint256 _maxShareRate) payable\n"})}),"\n",(0,r.jsx)(n.p,{children:"where"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_lastRequestIdToBeFinalized"})})," \u2014 the last request id to finalize"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_maxShareRate"})})," \u2014 the max share rate (ETH per share) for the request finalization (1e27 precision)"]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"withdrawals must not be paused"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"msg.sender"})," must have the ",(0,r.jsx)(n.code,{children:"FINALIZE_ROLE"})," assigned"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_lastRequestIdToBeFinalized"})," must be an existing unfinalized request id"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"msg.value"})," must be less or equal to the sum of unfinalized ",(0,r.jsx)(n.code,{children:"stETH"})," up to ",(0,r.jsx)(n.code,{children:"_lastRequestIdToBeFinalized"})]}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"pausefor",children:"pauseFor()"}),"\n",(0,r.jsxs)(n.p,{children:["Pause withdrawal requests placement and finalization for particular ",(0,r.jsx)(n.code,{children:"_duration"}),". Claiming finalized requests\nwill still be available."]}),"\n",(0,r.jsxs)(n.p,{children:["Emits a ",(0,r.jsx)(n.code,{children:"Paused"})," event."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function pauseFor(uint256 _duration) onlyRole(PAUSE_ROLE)\n"})}),"\n",(0,r.jsx)(n.p,{children:"where"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_duration"})})," \u2014 pause duration in seconds (use ",(0,r.jsx)(n.code,{children:"PAUSE_INFINITELY"})," for unlimited)"]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"msg.sender"})," must have a ",(0,r.jsx)(n.code,{children:"PAUSE_ROLE"})," assigned"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_duration"})," must not be zero"]}),"\n",(0,r.jsx)(n.li,{children:"the contract must not be already paused"}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"pauseuntil",children:"pauseUntil()"}),"\n",(0,r.jsxs)(n.p,{children:["Pause withdrawal requests placement and finalization until ",(0,r.jsx)(n.code,{children:"_pauseUntilInclusive"})," timestamp.\nClaiming finalized requests will still be available."]}),"\n",(0,r.jsxs)(n.p,{children:["Emits a ",(0,r.jsx)(n.code,{children:"Paused"})," event."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function pauseUntil(uint256 _pauseUntilInclusive) onlyRole(PAUSE_ROLE)\n"})}),"\n",(0,r.jsx)(n.p,{children:"where"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_pauseUntilInclusive"})})," \u2014 the ",(0,r.jsx)(n.code,{children:"block.timestamp"})," to pause until (inclusive)"]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"msg.sender"})," must have a ",(0,r.jsx)(n.code,{children:"PAUSE_ROLE"})," assigned"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_pauseUntilInclusive"})," must not be in the past"]}),"\n",(0,r.jsx)(n.li,{children:"the contract must not be already paused"}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"resume",children:"resume()"}),"\n",(0,r.jsx)(n.p,{children:"Resumes withdrawal requests placement and finalization.\nThe contract is deployed in a paused state and should be resumed explicitly."}),"\n",(0,r.jsxs)(n.p,{children:["Emits a ",(0,r.jsx)(n.code,{children:"Resumed"})," event."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function resume()\n"})}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"msg.sender"})," must have a ",(0,r.jsx)(n.code,{children:"RESUME_ROLE"})," assigned"]}),"\n",(0,r.jsx)(n.li,{children:"the contract must not be already resumed"}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"onoraclereport",children:"onOracleReport()"}),"\n",(0,r.jsx)(n.p,{children:"Updates bunker mode state and last report timestamp."}),"\n",(0,r.jsxs)(n.p,{children:["Emits a ",(0,r.jsx)(n.code,{children:"BunkerModeEnabled"})," or a ",(0,r.jsx)(n.code,{children:"BunkerModeDisabled"})," event."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function onOracleReport(\n    bool _isBunkerModeNow,\n    uint256 _bunkerStartTimestamp,\n    uint256 _currentReportTimestamp\n)\n"})}),"\n",(0,r.jsx)(n.p,{children:"where"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_isBunkerModeNow"})})," \u2014 is bunker mode reported by the oracle"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_bunkerStartTimestamp"})})," \u2014 timestamp of the bunker mode activation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_currentReportTimestamp"})})," \u2014 timestamp of the current report ref slot"]}),"\n"]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"Requirements:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"msg.sender"})," must have an ",(0,r.jsx)(n.code,{children:"ORACLE_ROLE"})," assigned"]}),"\n",(0,r.jsx)(n.li,{children:"all timestamps must be in the past"}),"\n"]})]}),"\n",(0,r.jsx)(n.h3,{id:"setbaseuri",children:"setBaseUri()"}),"\n",(0,r.jsx)(n.p,{children:"Sets the Base URI for computing token URI."}),"\n",(0,r.jsxs)(n.p,{children:["If the ",(0,r.jsx)(n.code,{children:"NFTDescriptor"})," address isn't set, the ",(0,r.jsx)(n.code,{children:"baseURI"})," would be used for generating the ",(0,r.jsx)(n.code,{children:"ERC-721"})," token URI.\nOtherwise, the ",(0,r.jsx)(n.code,{children:"NFTDescriptor"})," address would be used as a first-priority method."]}),"\n",(0,r.jsxs)(n.p,{children:["Emits a ",(0,r.jsx)(n.code,{children:"BaseURISet"})," event"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function setBaseURI(string _baseURI) external onlyRole(MANAGE_TOKEN_URI_ROLE)\n"})}),"\n",(0,r.jsx)(n.p,{children:"where"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_baseURI"})})," \u2014 the base URI to derive the token URI from. Should not end on ",(0,r.jsx)(n.code,{children:"/"})]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Reverts if ",(0,r.jsx)(n.code,{children:"msg.sender"})," has no ",(0,r.jsx)(n.code,{children:"MANAGE_TOKEN_URI_ROLE"})," assigned."]})}),"\n",(0,r.jsx)(n.h3,{id:"setnftdescriptoraddress",children:"setNFTDescriptorAddress()"}),"\n",(0,r.jsxs)(n.p,{children:["Sets the address of the ",(0,r.jsx)(n.code,{children:"NFTDescriptor"})," contract responsible for token URI generation."]}),"\n",(0,r.jsxs)(n.p,{children:["If the ",(0,r.jsx)(n.code,{children:"NFTDescriptor"})," address isn't set, the ",(0,r.jsx)(n.code,{children:"baseURI"})," would be used for generating the ",(0,r.jsx)(n.code,{children:"ERC-721"})," token URI.\nOtherwise, the ",(0,r.jsx)(n.code,{children:"NFTDescriptor"})," address would be used as a first-priority method."]}),"\n",(0,r.jsxs)(n.p,{children:["Emits a ",(0,r.jsx)(n.code,{children:"NftDescriptorAddressSet"})," event."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"function setNFTDescriptorAddress(address _nftDescriptorAddress) onlyRole(MANAGE_TOKEN_URI_ROLE)\n"})}),"\n",(0,r.jsx)(n.p,{children:"where"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"_nftDescriptorAddress"})})," \u2014 is the address of ",(0,r.jsx)(n.code,{children:"NFTDescriptor"})," contract,\nwhich must support the ",(0,r.jsx)(n.code,{children:"INFTDescriptor"})," interface:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sol",children:"interface INFTDescriptor {\n  function constructTokenURI(uint256 _requestId) external view returns (string memory)\n}\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Reverts if ",(0,r.jsx)(n.code,{children:"msg.sender"})," has no ",(0,r.jsx)(n.code,{children:"MANAGE_TOKEN_URI_ROLE"})," assigned."]})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>l});var r=s(6540);const t={},i=r.createContext(t);function d(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);